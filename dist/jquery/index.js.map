{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap 3809e99d5a8c6b925f4b","webpack:///./node_modules/rxjs/_esm5/util/root.js","webpack:///./node_modules/hy-component/src/common.js","webpack:///./node_modules/rxjs/_esm5/util/isFunction.js","webpack:///./node_modules/rxjs/_esm5/util/isObject.js","webpack:///./node_modules/rxjs/_esm5/util/tryCatch.js","webpack:///./node_modules/rxjs/_esm5/Subscription.js","webpack:///./node_modules/rxjs/_esm5/Subscriber.js","webpack:///./node_modules/rxjs/_esm5/util/toSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/noop.js","webpack:///./node_modules/rxjs/_esm5/util/pipe.js","webpack:///./node_modules/rxjs/_esm5/util/isScheduler.js","webpack:///./node_modules/rxjs/_esm5/util/isPromise.js","webpack:///./node_modules/rxjs/_esm5/util/subscribeToResult.js","webpack:///./node_modules/rxjs/_esm5/observable/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/map.js","webpack:///./node_modules/rxjs/_esm5/observable/dom/AjaxObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/_esm5/operators/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/_esm5/operators/filter.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeMap.js","webpack:///./node_modules/rxjs/_esm5/util/identity.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeAll.js","webpack:///./node_modules/rxjs/_esm5/observable/merge.js","webpack:///./node_modules/rxjs/_esm5/operators/merge.js","webpack:///./node_modules/rxjs/_esm5/operators/refCount.js","webpack:///./node_modules/rxjs/_esm5/operators/multicast.js","webpack:///./node_modules/rxjs/_esm5/operators/share.js","webpack:///./node_modules/rxjs/_esm5/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/concatAll.js","webpack:///./node_modules/rxjs/_esm5/observable/concat.js","webpack:///./node_modules/rxjs/_esm5/operators/startWith.js","webpack:///./node_modules/rxjs/_esm5/operators/switchMap.js","webpack:///./node_modules/rxjs/_esm5/operators/takeUntil.js","webpack:///./node_modules/rxjs/_esm5/operators/tap.js","webpack:///./src/common.js","webpack:///./src/mixin/srcset.js","webpack:///./node_modules/qd-set/esm/index.js","webpack:///./node_modules/hy-component/src/vanilla.js","webpack:///./node_modules/hy-component/src/define-jquery-component.js","webpack:///./node_modules/hy-component/src/component.js","webpack:///./node_modules/rxjs/_esm5/util/isArray.js","webpack:///./node_modules/rxjs/_esm5/util/errorObject.js","webpack:///./node_modules/rxjs/_esm5/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/_esm5/Observer.js","webpack:///./node_modules/rxjs/_esm5/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/_esm5/symbol/observable.js","webpack:///./node_modules/rxjs/_esm5/Observable.js","webpack:///./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/_esm5/SubjectSubscription.js","webpack:///./node_modules/rxjs/_esm5/Subject.js","webpack:///./node_modules/rxjs/_esm5/scheduler/Action.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/_esm5/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/_esm5/Scheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/queue.js","webpack:///./node_modules/rxjs/_esm5/Notification.js","webpack:///./node_modules/rxjs/_esm5/operators/observeOn.js","webpack:///./node_modules/rxjs/_esm5/ReplaySubject.js","webpack:///./node_modules/hy-component/src/rxjs.js","webpack:///./node_modules/attr-types/array.js","webpack:///./node_modules/attr-types/bool.js","webpack:///./node_modules/attr-types/number.js","webpack:///./node_modules/attr-types/one-of.js","webpack:///./node_modules/attr-types/regex.js","webpack:///./node_modules/attr-types/string.js","webpack:///./node_modules/rxjs/_esm5/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/_esm5/OuterSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/isArrayLike.js","webpack:///./node_modules/rxjs/_esm5/symbol/iterator.js","webpack:///./node_modules/rxjs/_esm5/InnerSubscriber.js","webpack:///./node_modules/rxjs/_esm5/operators/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/fromEvent.js","webpack:///./node_modules/rxjs/_esm5/observable/NeverObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/never.js","webpack:///./node_modules/rxjs/_esm5/observable/of.js","webpack:///./node_modules/rxjs/_esm5/observable/dom/ajax.js","webpack:///./node_modules/rxjs/_esm5/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/FromObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/from.js","webpack:///./src/mixin/index.js","webpack:///./src/jquery/index.js","webpack:///external \"jQuery\"","webpack:///(webpack)/buildin/global.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","global","_root","__window","window","__self","WorkerGlobalScope","__global","parseType","type","attr","_classCallCheck","instance","Constructor","TypeError","define_jquery_component__classCallCheck","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","component__possibleConstructorReturn","component__inherits","component__classCallCheck","isFunction","x","isObject","isObject__typeof","tryCatcher","tryCatchTarget","apply","arguments","e","errorObject","tryCatch","fn","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError","isTrustedSubscriber","obj","Subscriber_Subscriber","rxSubscriber","toSubscriber","nextOrObserver","error","complete","empty","noop","pipeFromArray","fns","length","input","prev","rxjs__classCallCheck","rxjs__possibleConstructorReturn","rxjs__inherits","isScheduler","schedule","isPromise","subscribe","then","subscribeToResult","outerSubscriber","result","outerValue","outerIndex","destination","InnerSubscriber","closed","Observable_Observable","_isScalar","next","syncErrorThrowable","isArrayLike","len","util_root","setTimeout","iterator_iterator","iterator","item","done","observable_observable","obs","msg","combineLatest_combineLatest","observables","_i","project","scheduler","pop","isArray","ArrayObservable_ArrayObservable","lift","CombineLatestOperator","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","FromEventObservable_toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","map","thisArg","source","MapOperator","getCORSRequest","XMLHttpRequest","XDomainRequest","Error","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","mapResponse","responseType","parseXhrResponse","xhr","response","JSON","parse","responseText","responseXML","distinctUntilChanged","compare","keySelector","DistinctUntilChangedOperator","distinctUntilKeyChanged","key","y","filter","predicate","FilterOperator","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","identity","mergeAll","merge","last","merge_merge","refCount","RefCountOperator","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","shareSubjectFactory","Subject_Subject","share","dispatchNext","arg","subscriber","dispatchError","getIterator","IteratorObservable_StringIterator","undefined","IteratorObservable_ArrayIterator","toLength","isNaN","numberIsFinite","sign","Math","floor","abs","maxSafeInteger","isFinite","valueAsNumber","concatAll","from","of","startWith","array","ScalarObservable","EmptyObservable","switchMap","SwitchMapOperator","takeUntil","notifier","TakeUntilOperator","tap","DoOperator","isExternal","_ref","protocol","host","location","srcset__classCallCheck","srcsetFromSrc","src","Srcset","width","dpr","parseSrcset","sources","match","srcsetRegex","exec","toLowerCase","parseInt","parseFloat","push","sortByWidth","s1","s2","sortByDpr","mixin__classCallCheck","mixin__possibleConstructorReturn","mixin__inherits","jquery__classCallCheck","jquery__possibleConstructorReturn","jquery__inherits","external__jQuery_","external__jQuery__default","_Set","Set","size","a","indexOf","has","add","delete","t","splice","clear","VanillaComponent","el","props","setupComponent","connectComponent","_typeof","Symbol","_createClass","defineProperties","target","descriptor","protoProps","staticProps","_get","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","JQueryComponent","component__createClass","COMPONENT_FEATURE_TESTS","aSymbol","sRoot","sState","process","env","requestIdleCallback","f","cancelIdleCallback","clearTimeout","component_Component","Component","componentMixin","C","_C","_class","state","defaults","assign","setupProperties","setupShadowDOM","eventName","data","componentName","event","CustomEvent","dispatchEvent","_this2","sideEffects","keys","forEach","sideEffect","setupProperty","_this3","set","oldValue","setInternalState","getRoot","getEl","Array","__extends","b","__","_super","toString","join","stack","message","Subscription__typeof","Subscription_Subscription","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","_a","index","remove","trial","sub","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","for","Subscriber__typeof","Subscriber___extends","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","isStopped","trustedSubscriber","Subscriber_SafeSubscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","$$observable","observable","Observable","_subscribe","operator","sink","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","pipe","operations","toPromise","ObjectUnsubscribedError___extends","ObjectUnsubscribedError","SubjectSubscription___extends","SubjectSubscription","subject","observers","subscriberIndex","Subject___extends","SubjectSubscriber","Subject","hasError","thrownError","Subject_AnonymousSubject","copy","slice","asObservable","AnonymousSubject","Action___extends","Action","work","delay","AsyncAction___extends","AsyncAction_AsyncAction","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","QueueAction___extends","QueueAction","Scheduler","SchedulerAction","now","Date","AsyncScheduler___extends","AsyncScheduler","active","scheduled","action","shift","QueueScheduler___extends","QueueScheduler","queue","Notification_Notification","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn___extends","observeOn_ObserveOnSubscriber","ObserveOnSubscriber","dispatch","notification","scheduleMessage","ObserveOnMessage","ReplaySubject___extends","ReplaySubject_ReplaySubject","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","time","max","rxjs__createClass","rxjs__get","rxjs_rxjsMixin","opts","subjects","disconnect","document","types","array_array","trim","replace","split","stringify","bool","attr2","number","oneOf","alts","regex","RegExp","r","string","ScalarObservable___extends","EmptyObservable___extends","ArrayObservable___extends","ArrayObservable","count","OuterSubscriber___extends","OuterSubscriber","notifyNext","innerValue","innerIndex","innerSub","notifyError","notifyComplete","Set_1","Map_1","Map","getOwnPropertyNames","InnerSubscriber___extends","combineLatest___extends","none","combineLatest_CombineLatestSubscriber","CombineLatestSubscriber","values","toRespond","unused","oldVal","_tryProject","FromEventObservable___extends","FromEventObservable_FromEventObservable","FromEventObservable","options","setupSubscription","handler","source_1","source_2","source_3","args","fromEvent","NeverObservable___extends","NeverObservable_NeverObservable","NeverObservable","never","map___extends","MapSubscriber","AjaxObservable___extends","urlOrRequest","request","async","createXHR","crossDomain","withCredentials","timeout","prop","AjaxObservable_AjaxSubscriber","post","put","patch","getJSON","AjaxSubscriber","FormData","serializeBody","send","AjaxResponse","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","readyState","status_1","status","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onerror","onreadystatechange","abort","originalEvent","ajax","distinctUntilChanged___extends","distinctUntilChanged_DistinctUntilChangedSubscriber","DistinctUntilChangedSubscriber","hasKey","Boolean","filter___extends","FilterSubscriber","mergeMap___extends","mergeMap_MergeMapSubscriber","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","_notifyResultSelector","refCount___extends","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable___extends","ConnectableObservable_ConnectableObservable","ConnectableObservable","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","PromiseObservable___extends","PromiseObservable_PromiseObservable","PromiseObservable","promise","IteratorObservable___extends","IteratorObservable","return","StringIterator","str","idx","charAt","ArrayIterator","arr","pow","ArrayLikeObservable___extends","ArrayLikeObservable_ArrayLikeObservable","ArrayLikeObservable","arrayLike","FromObservable__typeof","FromObservable___extends","FromObservable_FromObservable","FromObservable","switchMap___extends","switchMap_SwitchMapSubscriber","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","takeUntil___extends","takeUntil_TakeUntilSubscriber","TakeUntilSubscriber","tap___extends","tap_DoSubscriber","DoSubscriber","safeSubscriber","hasCSSOM","Element","CSS","common_createXObservable","X","cOpts","oOpts","xs","unobserve","createIntersectionObservable","IntersectionObserver","createResizeObservable","ResizeObserver","srcset__createClass","sources_","hasWidth","hasDpr","sort","widthBased_","dprBased_","selectByWidth_","selectByDpr_","minIndex","minScore","Infinity","minWidth","sWidth","score","opt_mapper","res","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","mixin__createClass","mixin__get","MIXIN_FEATURE_TESTS","arr2","JQUERY_FEATURE_TESTS","jquery__createClass","plugin","option","_len","_key","each","$this","ns","extend","dataProps","dft","_Component","$element","Event","trigger","fName","old","noConflict","_imageMixin","$el","_rxjsMixin","loadImage$","img","createElement","sizer","loading","querySelector","appendChild","attributeStyleMap","style","display","initialRect","contentRect","getBoundingClientRect","resize$","isIntersecting$","height","updateSizerStyle","rootMargin","_ref2","isIntersecting","_ref3","srcset$","cache","srcset","_ref4","_ref5","_ref6","_ref7","_ref9","p1","p2","_ref8","q1","q2","_ref10","_ref11","selectImgURL","removeAttribute","makeRequest","setImgSrcAndLoad","requestAnimationFrame","parentNode","removeChild","loadImageFallback","updateAttr","alt","decoding","longdesc","ismap","usemap","fireEvent","_ref12","_ref13","intersectionEntry","srcsetObj","URL","select","screen","devicePixelRatio","_ref14","_ref15","href","_ref16","createObjectURL","objectURL","load$","setAttribute","_this4","hasAttribute","getAttribute","_ref17","_ref18","contentWidth","percent","px","position","paddingTop","objURL","revokeObjectURL","g","eval"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jQuery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"hyImg\", [\"jQuery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hyImg\"] = factory(require(\"jQuery\"));\n\telse\n\t\troot[\"hyImg\"] = factory(root[\"jQuery\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jQuery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"hyImg\", [\"jQuery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hyImg\"] = factory(require(\"jQuery\"));\n\telse\n\t\troot[\"hyImg\"] = factory(root[\"jQuery\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return _root; });\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n/*@__PURE__*/(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n\n//# sourceMappingURL=root.js.map\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(3)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: external \"jQuery\"\nvar external__jQuery_ = __webpack_require__(2);\nvar external__jQuery__default = /*#__PURE__*/__webpack_require__.n(external__jQuery_);\n\n// CONCATENATED MODULE: ./node_modules/qd-set/esm/index.js\nvar _Set = typeof Set !== 'undefined' && new Set([1]).size === 1 ? Set : function () {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  a = a.filter(function (x, i) {\n    return i === a.indexOf(x);\n  });\n  a.size = a.length;\n  a.has = function (x) {\n    return a.indexOf(x) > -1;\n  };\n  a.add = function (x) {\n    if (!a.has(x)) {\n      a.size++;a.push(x);\n    }return a;\n  };\n  a.delete = function (x) {\n    var t = void 0;if (t = a.has(x)) {\n      a.size--;a.splice(a.indexOf(x), 1);\n    }return t;\n  };\n  a.clear = function () {\n    while (a.pop()) {}a.size = 0;\n  };\n  return a;\n};\n\n\n// CONCATENATED MODULE: ./node_modules/hy-component/src/common.js\n// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n/* eslint-disable no-plusplus */\n\nfunction parseType(type, attr) {\n  if (false) {\n    return console.warn(\"No type provided for attribute \" + attr + \".\");\n  }\n  return type ? type(attr) : attr;\n}\n\nfunction decamelize(str) {\n  var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n\n  return str.replace(/([a-z\\d])([A-Z])/g, \"$1\" + sep + \"$2\").replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, \"$1\" + sep + \"$2\").toLowerCase();\n}\n\nfunction preserveCamelCase(strarg) {\n  var str = strarg;\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charAt(i);\n\n    if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n      str = str.substr(0, i) + \"-\" + str.substr(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {\n      str = str.substr(0, i - 1) + \"-\" + str.substr(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = c.toLowerCase() === c;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = c.toUpperCase() === c;\n    }\n  }\n\n  return str;\n}\n\nfunction camelCase() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var str = [].map.call(args, function (x) {\n    return x.trim();\n  }).filter(function (x) {\n    return x.length;\n  }).join(\"-\");\n\n  if (str.length === 0) {\n    return \"\";\n  }\n\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  str = preserveCamelCase(str);\n\n  return str.replace(/^[_.\\- ]+/, \"\").toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n}\n// CONCATENATED MODULE: ./node_modules/hy-component/src/vanilla.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// # src / vanilla.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n\n\n\n\nvar VanillaComponent = function VanillaComponent(el, props) {\n  _classCallCheck(this, VanillaComponent);\n\n  this.setupComponent(el, props);\n  this.connectComponent();\n};\n// CONCATENATED MODULE: ./node_modules/hy-component/src/define-jquery-component.js\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction define_jquery_component__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / define-jquery-compnent.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// jQuery predates arrow functions and makes use of binding a functions's `this`,\n// so that passing arrow functions results in errors in many cases.\n// We modify eslint to allow passing anonymous `function`s:\n/* eslint-disable func-names, consistent-return */\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/keys';\n\n// jQuery is an optional dependency\n // eslint-disable-line import/no-extraneous-dependencies\n\n\n\n\n\n\n\n\nvar JQueryComponent = VanillaComponent;\n\nfunction defineJQueryComponent(name, Component) {\n  var ns = name.toLowerCase();\n\n  var Constructor = function (_Component) {\n    _inherits(Constructor, _Component);\n\n    function Constructor() {\n      define_jquery_component__classCallCheck(this, Constructor);\n\n      return _possibleConstructorReturn(this, (Constructor.__proto__ || Object.getPrototypeOf(Constructor)).apply(this, arguments));\n    }\n\n    _createClass(Constructor, [{\n      key: \"setupShadowDOM\",\n      value: function setupShadowDOM(el) {\n        this.$element = _get(Constructor.prototype.__proto__ || Object.getPrototypeOf(Constructor.prototype), \"setupShadowDOM\", this).call(this, external__jQuery__default()(el));\n        return this.$element[0];\n      }\n    }, {\n      key: \"fireEvent\",\n      value: function fireEvent(eventName, data) {\n        var event = external__jQuery__default.a.Event(eventName + \".\" + ns, data);\n        this.$element.trigger(event);\n      }\n    }]);\n\n    return Constructor;\n  }(Component);\n\n  function plugin(option, arg) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    var key = typeof option === \"string\" ? option : null;\n\n    return this.each(function () {\n      var $this = external__jQuery__default()(this);\n      var data = $this.data(ns);\n\n      if (!data) {\n        var defaults = Component.defaults,\n            types = Component.types;\n\n        var dataProps = $this.data();\n\n        Object.keys(defaults).forEach(function (dft) {\n          if (dataProps[dft]) {\n            var value = parseType(types[dft], dataProps[dft]);\n            dataProps[dft] = value != null ? value : Component.defaults[dft];\n          }\n        });\n        var props = external__jQuery__default.a.extend({}, dataProps, (typeof option === \"undefined\" ? \"undefined\" : _typeof(option)) === \"object\" && option);\n\n        $this.data(ns, new Constructor(this, props));\n      } else if (key && typeof data[key] === \"function\") {\n        data[key].apply(data, [arg].concat(args));\n      } else if ((typeof option === \"undefined\" ? \"undefined\" : _typeof(option)) === \"object\" && option) {\n        external__jQuery__default.a.extend(data, option);\n      }\n    });\n  }\n\n  var fName = ns.split(\".\").pop();\n\n  var old = external__jQuery__default.a.fn[fName];\n\n  external__jQuery__default.a.fn[fName] = plugin;\n  external__jQuery__default.a.fn[fName].Constructor = Constructor;\n\n  external__jQuery__default.a.fn[fName].noConflict = function () {\n    external__jQuery__default.a.fn[fName] = old;\n    return this;\n  };\n}\n// CONCATENATED MODULE: ./node_modules/hy-component/src/component.js\nvar component__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction component__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction component__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction component__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// # src / component.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/assign';\n// import 'core-js/fn/object/define-property';\n// import 'core-js/fn/object/keys';\n\n\n\n\n\nvar COMPONENT_FEATURE_TESTS = new _Set([\"customevent\"]);\n\nvar aSymbol = Symbol || function (x) {\n  return \"_\" + x;\n};\nvar sRoot = aSymbol(\"sroot\");\nvar sState = aSymbol(\"state\");\n\nwindow.process = window.process || {};\nwindow.process.env = window.process.env || {};\n\nwindow.requestIdleCallback = window.requestIdleCallback || function (f) {\n  return window.setTimeout(f, 0);\n};\nwindow.cancelIdleCallback = window.cancelIdleCallback || window.clearTimeout;\n\nvar component_Component = function Component() {\n  component__classCallCheck(this, Component);\n};\n\nvar componentMixin = function componentMixin() {\n  var C = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : component_Component;\n  return function (_C) {\n    component__inherits(_class, _C);\n\n    function _class() {\n      component__classCallCheck(this, _class);\n\n      return component__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    component__createClass(_class, [{\n      key: \"setupComponent\",\n      value: function setupComponent(el, state) {\n        var defaults = this.constructor.defaults;\n\n\n        if (false) {\n          var _constructor = this.constructor,\n              componentName = _constructor.componentName,\n              sideEffects = _constructor.sideEffects;\n\n          if (!componentName) {\n            console.warn(\"Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.\");\n          }\n          if (!defaults) {\n            console.warn(\"No default properties provided. Implement a static getter called `defaults`.\");\n          }\n          if (!sideEffects) {\n            console.warn(\"No side effects provided. Implement a static getter called `sideEffects`.\");\n          }\n        }\n\n        this[sState] = Object.assign({}, defaults, state);\n        this.setupProperties(this);\n        this[sRoot] = this.setupShadowDOM(el);\n      }\n    }, {\n      key: \"setupShadowDOM\",\n      value: function setupShadowDOM(el) {\n        return el;\n      }\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {}\n    }, {\n      key: \"disconnectComponent\",\n      value: function disconnectComponent() {}\n    }, {\n      key: \"adoptComponent\",\n      value: function adoptComponent() {}\n    }, {\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this[sRoot];\n      }\n    }, {\n      key: \"getEl\",\n      value: function getEl() {\n        return this[sRoot];\n      }\n    }, {\n      key: \"fireEvent\",\n      value: function fireEvent(eventName, data) {\n        var componentName = this.constructor.componentName;\n\n        var event = new CustomEvent(componentName + \"-\" + eventName, data);\n        this.el.dispatchEvent(event);\n      }\n    }, {\n      key: \"setInternalState\",\n      value: function setInternalState(key, value) {\n        this[sState][key] = value;\n      }\n    }, {\n      key: \"setupProperties\",\n      value: function setupProperties() {\n        var _this2 = this;\n\n        var sideEffects = this.constructor.sideEffects;\n\n\n        Object.keys(this[sState]).forEach(function (key) {\n          var sideEffect = sideEffects[key];\n          _this2.setupProperty(key, sideEffect);\n        });\n      }\n    }, {\n      key: \"setupProperty\",\n      value: function setupProperty(key, sideEffect) {\n        var _this3 = this;\n\n        Object.defineProperty(this, key, {\n          get: function get() {\n            return _this3[sState][key];\n          },\n          set: function set(value) {\n            var oldValue = _this3[sState][key];\n            _this3.setInternalState(key, value);\n            if (sideEffect) sideEffect.call(_this3, value, oldValue);\n          },\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }, {\n      key: \"sroot\",\n      get: function get() {\n        return this.getRoot();\n      }\n    }, {\n      key: \"el\",\n      get: function get() {\n        return this.getEl();\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/util/root.js\nvar util_root = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isFunction.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isArray.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar isArray = Array.isArray || function (x) {\n  return x && typeof x.length === 'number';\n};\n//# sourceMappingURL=isArray.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isObject.js\nvar isObject__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isObject(x) {\n    return x != null && (typeof x === 'undefined' ? 'undefined' : isObject__typeof(x)) === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/errorObject.js\n// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/tryCatch.js\n/** PURE_IMPORTS_START ._errorObject PURE_IMPORTS_END */\n\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    } catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/UnsubscriptionError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ? errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) {\n            return i + 1 + \") \" + err.toString();\n        }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error);\n//# sourceMappingURL=UnsubscriptionError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subscription.js\nvar Subscription__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\n\n\n\n\n\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription_Subscription = /*@__PURE__*/ /*@__PURE__*/function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents,\n            _unsubscribe = _a._unsubscribe,\n            _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        } else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || teardown === Subscription.EMPTY) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown === 'undefined' ? 'undefined' : Subscription__typeof(teardown)) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                } else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                        var tmp = subscription;\n                        subscription = new Subscription();\n                        subscription._subscriptions = [tmp];\n                    }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        } else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        } else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription());\n    return Subscription;\n}();\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) {\n        return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n    }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Observer.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar empty = {\n    closed: true,\n    next: function next(value) {},\n    error: function error(err) {\n        throw err;\n    },\n    complete: function complete() {}\n};\n//# sourceMappingURL=Observer.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/rxSubscriber.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nvar _Symbol = util_root[\"a\" /* root */].Symbol;\nvar rxSubscriber = typeof _Symbol === 'function' && typeof _Symbol.for === 'function' ?\n/*@__PURE__*/_Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nvar $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subscriber.js\nvar Subscriber__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START ._util_isFunction,._Subscription,._Observer,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar Subscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber_Subscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subscriber___extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = empty;\n                    break;\n                }\n                if ((typeof destinationOrNext === 'undefined' ? 'undefined' : Subscriber__typeof(destinationOrNext)) === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    } else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new Subscriber_SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new Subscriber_SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber] = function () {\n        return this;\n    };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_Subscription);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar Subscriber_SafeSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subscriber___extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        } else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                } else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            } else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            } else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function wrappedComplete() {\n                    return _this._complete.call(_this._context);\n                };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                } else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            } else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        } catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        } catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber_Subscriber);\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber_Subscriber || 'syncErrorThrowable' in obj && obj[rxSubscriber];\n}\n//# sourceMappingURL=Subscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/toSubscriber.js\n/** PURE_IMPORTS_START .._Subscriber,.._symbol_rxSubscriber,.._Observer PURE_IMPORTS_END */\n\n\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber]) {\n            return nextOrObserver[rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_Subscriber(empty);\n    }\n    return new Subscriber_Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/observable.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var _Symbol = context.Symbol;\n    if (typeof _Symbol === 'function') {\n        if (_Symbol.observable) {\n            $$observable = _Symbol.observable;\n        } else {\n            $$observable = _Symbol('observable');\n            _Symbol.observable = $$observable;\n        }\n    } else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nvar observable_observable = /*@__PURE__*/getSymbolObservable(util_root[\"a\" /* root */]);\n/**\n * @deprecated use observable instead\n */\nvar $$observable = observable_observable;\n//# sourceMappingURL=observable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/noop.js\n/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction noop() {}\n//# sourceMappingURL=noop.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/pipe.js\n/** PURE_IMPORTS_START ._noop PURE_IMPORTS_END */\n\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) {\n            return fn(prev);\n        }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Observable.js\n/** PURE_IMPORTS_START ._util_root,._util_toSubscriber,._symbol_observable,._util_pipe PURE_IMPORTS_END */\n\n\n\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable_Observable = /*@__PURE__*/ /*@__PURE__*/function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        } else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        } catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (util_root[\"a\" /* root */].Rx && util_root[\"a\" /* root */].Rx.config && util_root[\"a\" /* root */].Rx.config.Promise) {\n                PromiseCtor = util_root[\"a\" /* root */].Rx.config.Promise;\n            } else if (util_root[\"a\" /* root */].Promise) {\n                PromiseCtor = util_root[\"a\" /* root */].Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    } catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                } else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (util_root[\"a\" /* root */].Rx && util_root[\"a\" /* root */].Rx.config && util_root[\"a\" /* root */].Rx.config.Promise) {\n                PromiseCtor = util_root[\"a\" /* root */].Rx.config.Promise;\n            } else if (util_root[\"a\" /* root */].Promise) {\n                PromiseCtor = util_root[\"a\" /* root */].Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) {\n                return value = x;\n            }, function (err) {\n                return reject(err);\n            }, function () {\n                return resolve(value);\n            });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}();\n//# sourceMappingURL=Observable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar ObjectUnsubscribedError___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ObjectUnsubscribedError___extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error);\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/SubjectSubscription.js\n/** PURE_IMPORTS_START ._Subscription PURE_IMPORTS_END */\nvar SubjectSubscription___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    SubjectSubscription___extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_Subscription);\n//# sourceMappingURL=SubjectSubscription.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subject.js\n/** PURE_IMPORTS_START ._Observable,._Subscriber,._Subscription,._util_ObjectUnsubscribedError,._SubjectSubscription,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar Subject___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_Subscriber);\n/**\n * @class Subject<T>\n */\nvar Subject_Subject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new Subject_AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_Subscription.EMPTY;\n        } else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_Subscription.EMPTY;\n        } else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new Subject_AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_Observable);\n/**\n * @class AnonymousSubject<T>\n */\nvar Subject_AnonymousSubject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        } else {\n            return Subscription_Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject_Subject);\n//# sourceMappingURL=Subject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/Action.js\n/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar Action___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Action___extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription_Subscription);\n//# sourceMappingURL=Action.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/AsyncAction.js\n/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar AsyncAction___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction_AsyncAction = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AsyncAction___extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return util_root[\"a\" /* root */].setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return util_root[\"a\" /* root */].clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        } else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        } catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action);\n//# sourceMappingURL=AsyncAction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/QueueAction.js\n/** PURE_IMPORTS_START ._AsyncAction PURE_IMPORTS_END */\nvar QueueAction___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    QueueAction___extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_AsyncAction);\n//# sourceMappingURL=QueueAction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Scheduler.js\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () {\n        return +new Date();\n    };\n    return Scheduler;\n}();\n//# sourceMappingURL=Scheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js\n/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar AsyncScheduler___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AsyncScheduler = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AsyncScheduler___extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler);\n//# sourceMappingURL=AsyncScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/QueueScheduler.js\n/** PURE_IMPORTS_START ._AsyncScheduler PURE_IMPORTS_END */\nvar QueueScheduler___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar QueueScheduler = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    QueueScheduler___extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler);\n//# sourceMappingURL=QueueScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/queue.js\n/** PURE_IMPORTS_START ._QueueAction,._QueueScheduler PURE_IMPORTS_END */\n\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nvar queue = /*@__PURE__*/new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Notification.js\n/** PURE_IMPORTS_START ._Observable PURE_IMPORTS_END */\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification_Notification = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        } else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_Observable.of(this.value);\n            case 'E':\n                return Observable_Observable.throw(this.error);\n            case 'C':\n                return Observable_Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}();\n//# sourceMappingURL=Notification.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/observeOn.js\n/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar observeOn___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new observeOn_ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar observeOn_ObserveOnSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    observeOn___extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification,\n            destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_Subscriber);\nvar ObserveOnMessage = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}();\n//# sourceMappingURL=observeOn.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/ReplaySubject.js\n/** PURE_IMPORTS_START ._Subject,._scheduler_queue,._Subscription,._operators_observeOn,._util_ObjectUnsubscribedError,._SubjectSubscription PURE_IMPORTS_END */\nvar ReplaySubject___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject_ReplaySubject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ReplaySubject___extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated internal use only */ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else if (this.hasError) {\n            subscription = Subscription_Subscription.EMPTY;\n        } else if (this.isStopped) {\n            subscription = Subscription_Subscription.EMPTY;\n        } else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        } else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if (now - _events[spliceCount].time < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_Subject);\nvar ReplayEvent = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}();\n//# sourceMappingURL=ReplaySubject.js.map\n// CONCATENATED MODULE: ./node_modules/hy-component/src/rxjs.js\nvar rxjs__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar rxjs__get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction rxjs__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction rxjs__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction rxjs__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / rxjs.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n\n\n\nvar rxjs_rxjsMixin = function rxjsMixin(C) {\n  return function (_C) {\n    rxjs__inherits(_class, _C);\n\n    function _class() {\n      rxjs__classCallCheck(this, _class);\n\n      return rxjs__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    rxjs__createClass(_class, [{\n      key: \"setupComponent\",\n      value: function setupComponent(el, opts) {\n        var _this2 = this;\n\n        var sideEffects = {};\n\n        this.subjects = {};\n        this.subjects.disconnect = new Subject_Subject();\n        this.subjects.document = new ReplaySubject_ReplaySubject();\n\n        Object.keys(this.constructor.types).map(function (key) {\n          _this2.subjects[key] = new ReplaySubject_ReplaySubject(1);\n          sideEffects[key] = function (x) {\n            return _this2.subjects[key].next(x);\n          };\n        });\n\n        Object.defineProperty(this.constructor, \"sideEffects\", {\n          get: function get() {\n            return sideEffects;\n          },\n          set: function set() {},\n          enumerable: true,\n          configurable: true\n        });\n\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"setupComponent\", this).call(this, el, opts);\n      }\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {\n        var _this3 = this;\n\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"connectComponent\", this).call(this);\n        this.subjects.document.next(document);\n        Object.keys(this.constructor.types).map(function (key) {\n          return _this3.subjects[key].next(_this3[key]);\n        });\n      }\n    }, {\n      key: \"disconnectComponent\",\n      value: function disconnectComponent() {\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"disconnectComponent\", this).call(this);\n        this.subjects.disconnect.next({});\n      }\n    }, {\n      key: \"adaptComponent\",\n      value: function adaptComponent() {\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"adaptComponent\", this).call(this);\n        this.subjects.document.next(document);\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./node_modules/attr-types/array.js\nvar array_array = function array(attr) {\n  if (attr == null) return null;\n\n  var str = attr.trim().replace(/^\\[?(.*?)\\]?$/, '$1').split(',').map(function (x) {\n    return x.trim();\n  });\n\n  return str || null;\n};\n\narray_array.stringify = function (a) {\n  return a && a.length > 0 ? a.join(',') : null;\n};\n\n/* harmony default export */ var attr_types_array = (array_array);\n// CONCATENATED MODULE: ./node_modules/attr-types/array-of.js\n\n\nvar array_of_arrayOf = function arrayOf(type) {\n  var f = function f(attr) {\n    if (attr == null) return null;\n    var a = array_array(attr).map(type);\n    if (a.reduce(function (r, x) {\n      return r && x !== null;\n    }, true)) {\n      return a;\n    }\n    return null;\n  };\n\n  f.stringify = function (a) {\n    var a2 = a && a.map && a.map(type.stringify);\n    if (a2 && a2.reduce(function (r, x) {\n      return r && x !== null;\n    }, true)) {\n      return array_array.stringify(a2);\n    }\n    return null;\n  };\n\n  return f;\n};\n\n/* harmony default export */ var array_of = (array_of_arrayOf);\n// CONCATENATED MODULE: ./node_modules/attr-types/bool.js\nvar bool = function bool(attr) {\n  if (attr == null) return false;\n  var attr2 = attr.trim && attr.trim() || attr;\n  return !(attr2 === 'false' || attr2 === 'null' || attr2 === 'undefined' || attr2 === '0' || attr2 === false);\n};\n\nbool.stringify = function (b) {\n  return b ? '' : null;\n};\n\n/* harmony default export */ var attr_types_bool = (bool);\n// CONCATENATED MODULE: ./node_modules/attr-types/number.js\nvar number = function number(attr) {\n  if (attr == null) return null;\n  return Number(attr);\n};\n\nnumber.stringify = function (n) {\n  if (n == null) return null;\n  return \"\" + n;\n};\n\n/* harmony default export */ var attr_types_number = (number);\n// CONCATENATED MODULE: ./node_modules/attr-types/one-of.js\nvar oneOf = function oneOf(alts) {\n  var f = function f(attr) {\n    if (attr == null) return null;\n\n    var i = alts.indexOf(attr);\n    if (false) {\n      console.warn('\\'' + attr + '\\' is not \\'oneOf\\': ' + alts.join(', '));\n    }\n\n    return i > -1 ? alts[i] : null;\n  };\n\n  f.stringify = function (o) {\n    return alts.indexOf(o) !== -1 ? o : null;\n  };\n\n  return f;\n};\n\n/* harmony default export */ var one_of = (oneOf);\n// CONCATENATED MODULE: ./node_modules/attr-types/regex.js\nvar regex = function regex(attr) {\n  if (attr == null) return null;\n  var attr2 = attr.trim && attr.trim() || attr;\n  var match = attr2.match(/^\\/?(.*?)(\\/([gimy]*))?$/);\n  return new RegExp(match[1], match[3]);\n};\n\nregex.stringify = function (r) {\n  return r && r.toString() || null;\n};\n\n/* harmony default export */ var attr_types_regex = (regex);\n// CONCATENATED MODULE: ./node_modules/attr-types/string.js\nvar string = function string(attr) {\n  return attr;\n};\n\nstring.stringify = function (s) {\n  return s;\n};\n\n/* harmony default export */ var attr_types_string = (string);\n// CONCATENATED MODULE: ./node_modules/attr-types/index.js\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var attr_types = ({\n  array: array_array, arrayOf: array_of_arrayOf, bool: bool, number: number, oneOf: oneOf, regex: regex, string: string\n});\n// CONCATENATED MODULE: ./node_modules/hy-component/src/types.js\n\n\n\n/* harmony default export */ var src_types = ({\n  array: array_array,\n  arrayOf: array_of_arrayOf,\n  bool: bool,\n  number: number,\n  oneOf: oneOf,\n  regex: regex,\n  string: string\n});\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isScheduler.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ScalarObservable.js\n/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar ScalarObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ScalarObservable___extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done,\n            value = state.value,\n            subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        } else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ScalarObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/EmptyObservable.js\n/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar EmptyObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    EmptyObservable___extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        } else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_Observable);\n//# sourceMappingURL=EmptyObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ArrayObservable.js\n/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable,.._util_isScheduler PURE_IMPORTS_END */\nvar ArrayObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable_ArrayObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArrayObservable___extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        } else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        } else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        } else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array,\n            index = state.index,\n            count = state.count,\n            subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        } else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ArrayObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/OuterSubscriber.js\n/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar OuterSubscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    OuterSubscriber___extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=OuterSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isArrayLike.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar isArrayLike = function isArrayLike(x) {\n  return x && typeof x.length === 'number';\n};\n//# sourceMappingURL=isArrayLike.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isPromise.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/iterator.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nfunction symbolIteratorPonyfill(root) {\n    var _Symbol = root.Symbol;\n    if (typeof _Symbol === 'function') {\n        if (!_Symbol.iterator) {\n            _Symbol.iterator = _Symbol('iterator polyfill');\n        }\n        return _Symbol.iterator;\n    } else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nvar iterator_iterator = /*@__PURE__*/symbolIteratorPonyfill(util_root[\"a\" /* root */]);\n/**\n * @deprecated use iterator instead\n */\nvar $$iterator = iterator_iterator;\n//# sourceMappingURL=iterator.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/InnerSubscriber.js\n/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar InnerSubscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    InnerSubscriber___extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=InnerSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/subscribeToResult.js\n/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\n\n\n\n\n\n\n\n\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        } else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    } else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    } else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) {\n            return destination.error(err);\n        }).then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            util_root[\"a\" /* root */].setTimeout(function () {\n                throw err;\n            });\n        });\n        return destination;\n    } else if (result && typeof result[iterator_iterator] === 'function') {\n        var iterator = result[iterator_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    } else if (result && typeof result[observable_observable] === 'function') {\n        var obs = result[observable_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        } else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    } else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/combineLatest.js\n/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar combineLatest___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) {\n        return source.lift.call(new ArrayObservable_ArrayObservable([source].concat(observables)), new CombineLatestOperator(project));\n    };\n}\nvar CombineLatestOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new combineLatest_CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar combineLatest_CombineLatestSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    combineLatest___extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        } else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            } else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=combineLatest.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/combineLatest.js\n/** PURE_IMPORTS_START .._util_isScheduler,.._util_isArray,._ArrayObservable,.._operators_combineLatest PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest_combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/FromEventObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar FromEventObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\nvar FromEventObservable_toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && FromEventObservable_toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && FromEventObservable_toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable_FromEventObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    FromEventObservable___extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        } else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function unsubscribe() {\n                return source_1.removeEventListener(eventName, handler, options);\n            };\n        } else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function unsubscribe() {\n                return source_2.off(eventName, handler);\n            };\n        } else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function unsubscribe() {\n                return source_3.removeListener(eventName, handler);\n            };\n        } else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            } else {\n                subscriber.next(result);\n            }\n        } : function (e) {\n            return subscriber.next(e);\n        };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_Observable);\n//# sourceMappingURL=FromEventObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/fromEvent.js\n/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\n\nvar fromEvent = FromEventObservable_FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/NeverObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_noop PURE_IMPORTS_END */\nvar NeverObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable_NeverObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    NeverObservable___extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    /** @deprecated internal use only */NeverObservable.prototype._subscribe = function (subscriber) {\n        noop();\n    };\n    return NeverObservable;\n}(Observable_Observable);\n//# sourceMappingURL=NeverObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/never.js\n/** PURE_IMPORTS_START ._NeverObservable PURE_IMPORTS_END */\n\nvar never = NeverObservable_NeverObservable.create;\n//# sourceMappingURL=never.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/of.js\n/** PURE_IMPORTS_START ._ArrayObservable PURE_IMPORTS_END */\n\nvar of = ArrayObservable_ArrayObservable.of;\n//# sourceMappingURL=of.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/map.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar map___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    map___extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=map.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/dom/AjaxObservable.js\n/** PURE_IMPORTS_START .._.._util_root,.._.._util_tryCatch,.._.._util_errorObject,.._.._Observable,.._.._Subscriber,.._.._operators_map PURE_IMPORTS_END */\nvar AjaxObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\nfunction getCORSRequest() {\n    if (util_root[\"a\" /* root */].XMLHttpRequest) {\n        return new util_root[\"a\" /* root */].XMLHttpRequest();\n    } else if (!!util_root[\"a\" /* root */].XDomainRequest) {\n        return new util_root[\"a\" /* root */].XDomainRequest();\n    } else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (util_root[\"a\" /* root */].XMLHttpRequest) {\n        return new util_root[\"a\" /* root */].XMLHttpRequest();\n    } else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new util_root[\"a\" /* root */].ActiveXObject(progId)) {\n                        break;\n                    }\n                } catch (e) {}\n            }\n            return new util_root[\"a\" /* root */].ActiveXObject(progId);\n        } catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) {\n        headers = null;\n    }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\n;\nvar mapResponse = /*@__PURE__*/map(function (x, index) {\n    return x.response;\n});\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AjaxObservable___extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function createXHR() {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        } else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    /** @deprecated internal use only */AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxObservable_AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = function () {\n        var create = function create(urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    }();\n    return AjaxObservable;\n}(Observable_Observable);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxObservable_AjaxSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AjaxObservable___extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(util_root[\"a\" /* root */].FormData && request.body instanceof util_root[\"a\" /* root */].FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this,\n            xhr = _a.xhr,\n            request = _a.request,\n            destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this,\n            request = _a.request,\n            _b = _a.request,\n            user = _b.user,\n            method = _b.method,\n            url = _b.url,\n            async = _b.async,\n            password = _b.password,\n            headers = _b.headers,\n            body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch(createXHR).call(request);\n        if (xhr === errorObject) {\n            this.error(errorObject.e);\n        } else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            } else {\n                result = tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject) {\n                this.error(errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n            if (result === errorObject) {\n                this.error(errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        } else if (util_root[\"a\" /* root */].FormData && body instanceof util_root[\"a\" /* root */].FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) {\n                    return encodeURI(key) + \"=\" + encodeURI(body[key]);\n                }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout,\n                subscriber = _a.subscriber,\n                progressSubscriber = _a.progressSubscriber,\n                request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var _xhrProgress_;\n                _xhrProgress_ = function xhrProgress_1(e) {\n                    var progressSubscriber = _xhrProgress_.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (util_root[\"a\" /* root */].XDomainRequest) {\n                    xhr.onprogress = _xhrProgress_;\n                } else {\n                    xhr.upload.onprogress = _xhrProgress_;\n                }\n                _xhrProgress_.progressSubscriber = progressSubscriber;\n            }\n            var _xhrError_;\n            _xhrError_ = function xhrError_1(e) {\n                var _a = _xhrError_,\n                    progressSubscriber = _a.progressSubscriber,\n                    subscriber = _a.subscriber,\n                    request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = _xhrError_;\n            _xhrError_.request = request;\n            _xhrError_.subscriber = this;\n            _xhrError_.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange,\n                subscriber = _a.subscriber,\n                progressSubscriber = _a.progressSubscriber,\n                request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = this.responseType === 'text' ? this.response || this.responseText : this.response;\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                } else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this,\n            done = _a.done,\n            xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_Subscriber);\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = /*@__PURE__*/ /*@__PURE__*/function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}();\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AjaxObservable___extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error);\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            } else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return 'response' in xhr ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AjaxObservable___extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError);\n//# sourceMappingURL=AjaxObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/dom/ajax.js\n/** PURE_IMPORTS_START ._AjaxObservable PURE_IMPORTS_END */\n\nvar ajax = AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/distinctUntilChanged.js\n/** PURE_IMPORTS_START .._Subscriber,.._util_tryCatch,.._util_errorObject PURE_IMPORTS_END */\nvar distinctUntilChanged___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) {\n        return source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n    };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new distinctUntilChanged_DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar distinctUntilChanged_DistinctUntilChangedSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    distinctUntilChanged___extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        } else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=distinctUntilChanged.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/distinctUntilKeyChanged.js\n/** PURE_IMPORTS_START ._distinctUntilChanged PURE_IMPORTS_END */\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n  return distinctUntilChanged(function (x, y) {\n    return compare ? compare(x[key], y[key]) : x[key] === y[key];\n  });\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/filter.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar filter___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    filter___extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=filter.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mergeMap.js\n/** PURE_IMPORTS_START .._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar mergeMap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nvar MergeMapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new mergeMap_MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar mergeMap_MergeMapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    mergeMap___extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        } else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        } else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=mergeMap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/identity.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mergeAll.js\n/** PURE_IMPORTS_START ._mergeMap,.._util_identity PURE_IMPORTS_END */\n\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, null, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/merge.js\n/** PURE_IMPORTS_START .._Observable,._ArrayObservable,.._util_isScheduler,.._operators_mergeAll PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    } else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(new ArrayObservable_ArrayObservable(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/merge.js\n/** PURE_IMPORTS_START .._observable_merge PURE_IMPORTS_END */\n\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge_merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        return source.lift.call(merge.apply(void 0, [source].concat(observables)));\n    };\n}\n//# sourceMappingURL=merge.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/refCount.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar refCount___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}();\nvar RefCountSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    refCount___extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=refCount.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ConnectableObservable.js\n/** PURE_IMPORTS_START .._Subject,.._Observable,.._Subscriber,.._Subscription,.._operators_refCount PURE_IMPORTS_END */\nvar ConnectableObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable_ConnectableObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(ConnectableObservable, _super);\n    function ConnectableObservable( /** @deprecated internal use only */source,\n    /** @deprecated internal use only */subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_Subscription();\n            connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_Subscription.EMPTY;\n            } else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_Observable);\nvar connectableProto = ConnectableObservable_ConnectableObservable.prototype;\nvar connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber);\nvar ConnectableObservable_RefCountOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new ConnectableObservable_RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}();\nvar ConnectableObservable_RefCountSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=ConnectableObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/multicast.js\n/** PURE_IMPORTS_START .._observable_ConnectableObservable PURE_IMPORTS_END */\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        } else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}();\n//# sourceMappingURL=multicast.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/share.js\n/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\n\n\n\nfunction shareSubjectFactory() {\n    return new Subject_Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) {\n        return refCount()(multicast(shareSubjectFactory)(source));\n    };\n}\n;\n//# sourceMappingURL=share.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/PromiseObservable.js\n/** PURE_IMPORTS_START .._util_root,.._Observable PURE_IMPORTS_END */\nvar PromiseObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable_PromiseObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    PromiseObservable___extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            } else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                }).then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    util_root[\"a\" /* root */].setTimeout(function () {\n                        throw err;\n                    });\n                });\n            }\n        } else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            } else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                }).then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    util_root[\"a\" /* root */].setTimeout(function () {\n                        throw err;\n                    });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_Observable);\nfunction dispatchNext(arg) {\n    var value = arg.value,\n        subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err,\n        subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/IteratorObservable.js\n/** PURE_IMPORTS_START .._util_root,.._Observable,.._symbol_iterator PURE_IMPORTS_END */\nvar IteratorObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    IteratorObservable___extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index,\n            hasError = state.hasError,\n            iterator = state.iterator,\n            subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this,\n            iterator = _a.iterator,\n            scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        } else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                } else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_Observable);\nvar IteratorObservable_StringIterator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = str.length;\n        }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_iterator] = function () {\n        return this;\n    };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}();\nvar IteratorObservable_ArrayIterator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = toLength(arr);\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_iterator] = function () {\n        return this;\n    };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}();\nfunction getIterator(obj) {\n    var i = obj[iterator_iterator];\n    if (!i && typeof obj === 'string') {\n        return new IteratorObservable_StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new IteratorObservable_ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_iterator]();\n}\nvar maxSafeInteger = /*@__PURE__*/Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && util_root[\"a\" /* root */].isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js\n/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable PURE_IMPORTS_END */\nvar ArrayLikeObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable_ArrayLikeObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArrayLikeObservable___extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        } else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        } else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike,\n            index = state.index,\n            length = state.length,\n            subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this,\n            arrayLike = _a.arrayLike,\n            scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        } else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ArrayLikeObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/FromObservable.js\nvar FromObservable__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START .._util_isArray,.._util_isArrayLike,.._util_isPromise,._PromiseObservable,._IteratorObservable,._ArrayObservable,._ArrayLikeObservable,.._symbol_iterator,.._Observable,.._operators_observeOn,.._symbol_observable PURE_IMPORTS_END */\nvar FromObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable_FromObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    FromObservable___extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_observable] === 'function') {\n                if (ish instanceof Observable_Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            } else if (isArray(ish)) {\n                return new ArrayObservable_ArrayObservable(ish, scheduler);\n            } else if (isPromise(ish)) {\n                return new PromiseObservable_PromiseObservable(ish, scheduler);\n            } else if (typeof ish[iterator_iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable(ish, scheduler);\n            } else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable_ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && (typeof ish === 'undefined' ? 'undefined' : FromObservable__typeof(ish)) || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_observable]().subscribe(subscriber);\n        } else {\n            return ish[observable_observable]().subscribe(new observeOn_ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_Observable);\n//# sourceMappingURL=FromObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/from.js\n/** PURE_IMPORTS_START ._FromObservable PURE_IMPORTS_END */\n\nvar from = FromObservable_FromObservable.create;\n//# sourceMappingURL=from.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/concatAll.js\n/** PURE_IMPORTS_START ._mergeAll PURE_IMPORTS_END */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n  return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/concat.js\n/** PURE_IMPORTS_START .._util_isScheduler,._of,._from,.._operators_concatAll PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || observables.length === 2 && isScheduler(observables[1])) {\n        return from(observables[0]);\n    }\n    return concatAll()(of.apply(void 0, observables));\n}\n//# sourceMappingURL=concat.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/startWith.js\n/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\n\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        } else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat(new ScalarObservable(array[0], scheduler), source);\n        } else if (len > 1) {\n            return concat(new ArrayObservable_ArrayObservable(array, scheduler), source);\n        } else {\n            return concat(new EmptyObservable(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/switchMap.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar switchMap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nvar SwitchMapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new switchMap_SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar switchMap_SwitchMapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    switchMap___extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        } catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        } else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=switchMap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/takeUntil.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar takeUntil___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) {\n        return source.lift(new TakeUntilOperator(notifier));\n    };\n}\nvar TakeUntilOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new takeUntil_TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar takeUntil_TakeUntilSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    takeUntil___extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=takeUntil.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/tap.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar tap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new tap_DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar tap_DoSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    tap___extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=tap.js.map\n// CONCATENATED MODULE: ./src/common.js\n// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\nvar hasCSSOM = \"attributeStyleMap\" in Element.prototype && \"CSS\" in window && CSS.number;\n\nvar common_createXObservable = function createXObservable(X) {\n  return function (el, cOpts, oOpts) {\n    return Observable_Observable.create(function (obs) {\n      var next = obs.next.bind(obs);\n      var observer = new X(function (xs) {\n        return Array.from(xs).forEach(next);\n      }, cOpts);\n      /* if (process.env.DEBUG) console.log(\"observe\", X.name); */\n      observer.observe(el, oOpts);\n      return function () {\n        /* if (process.env.DEBUG) console.log(\"unobserve\", X.name); */\n        observer.unobserve(el);\n      };\n    });\n  };\n};\n\nvar createIntersectionObservable = common_createXObservable(window.IntersectionObserver);\nvar createResizeObservable = common_createXObservable(window.ResizeObserver);\n\n/* export const idle = x => new Promise(res => requestIdleCallback(() => res(x))); */\n/* export const anim = x => new Promise(res => requestAnimationFrame(() => res(x))); */\n\n// Consider a URL external if either the protocol, hostname or port is different.\nfunction isExternal(_ref) {\n  var protocol = _ref.protocol,\n      host = _ref.host;\n  var location = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location;\n\n  return protocol !== location.protocol || host !== location.host;\n}\n\n/*\nfunction blobToDataURL(blob) {\n  return new Promise((res, rej) => {\n    const a = new FileReader();\n    a.onload = ({ target: { result } }) => res(result);\n    a.onerror = rej;\n    a.readAsDataURL(blob);\n  });\n}\n*/\n\n/*\nconst createObjectURL = blob =>\n  Observable.create(obs => {\n    const objURL = URL.createObjectURL(blob);\n    obs.next(objURL);\n    return () => {\n      if (process.env.DEBUG) console.log(\"revoke\", objURL);\n      URL.revokeObjectURL(objURL);\n    };\n  });\n*/\n// CONCATENATED MODULE: ./src/mixin/srcset.js\nvar srcset__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction srcset__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// <http://www.apache.org/licenses/LICENSE-2.0>\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// import { dev, user } from \"./log\";\n\n/**\n * A single source within a srcset. Only one: width or DPR can be specified at\n * a time.\n * @typedef {{\n *   url: string,\n *   width: (number|undefined),\n *   dpr: (number|undefined)\n * }}\n */\nvar SrcsetSourceDef = void 0;\n\n/**\n * General grammar: (URL [NUM[w|x]],)*\n * Example 1: \"image1.png 100w, image2.png 50w\"\n * Example 2: \"image1.png 2x, image2.png\"\n * Example 3: \"image1,100w.png 100w, image2.png 50w\"\n */\nvar srcsetRegex = /(\\S+)(?:\\s+(?:(-?\\d+(?:\\.\\d+)?)([a-zA-Z]*)))?\\s*(?:,|$)/g;\n\n/**\n * Extracts `srcset` and fallbacks to `src` if not available.\n * @param {!Element} element\n * @return {!Srcset}\n */\nfunction srcsetFromElement(element) {\n  var srcsetAttr = element.getAttribute(\"srcset\");\n  if (srcsetAttr) {\n    return parseSrcset(srcsetAttr);\n  }\n  // We can't push `src` via `parseSrcset` because URLs in `src` are not always\n  // RFC compliant and can't be easily parsed as an `srcset`. For instance,\n  // they sometimes contain space characters.\n  var srcAttr = element.getAttribute(\"src\");\n  return srcsetFromSrc(srcAttr);\n}\n\n/**\n * Creates a Srcset from a `src` attribute value.\n * @param {string} src\n * @return {!Srcset}\n */\nfunction srcsetFromSrc(src) {\n  return new Srcset([{ url: src, width: undefined, dpr: 1 }]);\n}\n\n/**\n * Parses the text representation of srcset into Srcset object.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes.\n * See http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n * @param {string} s\n * @return {!Srcset}\n */\nfunction parseSrcset(s) {\n  var sources = [];\n  var match = void 0;\n  while (match = srcsetRegex.exec(s)) {\n    var url = match[1];\n    var width = void 0,\n        dpr = void 0;\n    if (match[2]) {\n      var type = match[3].toLowerCase();\n      if (type == \"w\") {\n        width = parseInt(match[2], 10);\n      } else if (type == \"x\") {\n        dpr = parseFloat(match[2]);\n      } else {\n        continue;\n      }\n    } else {\n      // If no \"w\" or \"x\" specified, we assume it's \"1x\".\n      dpr = 1;\n    }\n    sources.push({ url: url, width: width, dpr: dpr });\n  }\n  return new Srcset(sources);\n}\n\n/**\n * A srcset object contains one or more sources.\n *\n * There are two types of sources: width-based and DPR-based. Only one type\n * of sources allowed to be specified within a single srcset. Depending on a\n * usecase, the components are free to choose any source that best corresponds\n * to the required rendering quality and network and CPU conditions. See\n * \"select\" method for details on how this selection is performed.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes\n */\nvar Srcset = function () {\n  /**\n   * @param {!Array<!SrcsetSourceDef>} sources\n   */\n  function Srcset(sources) {\n    srcset__classCallCheck(this, Srcset);\n\n    // user().assert(sources.length > 0, \"Srcset must have at least one source\");\n    /** @private @const {!Array<!SrcsetSourceDef>} */\n    this.sources_ = sources;\n\n    // Only one type of source specified can be used - width or DPR.\n    var hasWidth = false;\n    var hasDpr = false;\n    for (var i = 0; i < sources.length; i++) {\n      var source = sources[i];\n      hasWidth = hasWidth || !!source.width;\n      hasDpr = hasDpr || !!source.dpr;\n    }\n    // user().assert(!!(hasWidth ^ hasDpr), \"Srcset must have width or dpr sources, but not both\");\n\n    // Source and assert duplicates.\n    sources.sort(hasWidth ? sortByWidth : sortByDpr);\n\n    /** @private @const {boolean} */\n    this.widthBased_ = hasWidth;\n\n    /** @private @const {boolean} */\n    this.dprBased_ = hasDpr;\n  }\n\n  /**\n   * Performs selection for specified width and DPR. Here, width is the width\n   * in screen pixels and DPR is the device-pixel-ratio or pixel density of\n   * the device. Depending on the circumstances, such as low network conditions,\n   * it's possible to manipulate the result of this method by passing a lower\n   * DPR value.\n   *\n   * The source selection depends on whether this is width-based or DPR-based\n   * srcset.\n   *\n   * In a width-based source, the source's width is the physical width of a\n   * resource (e.g. an image). Depending on the provided DPR, this width is\n   * converted to the screen pixels as following:\n   *   pixelWidth = sourceWidth / DPR\n   *\n   * Then, the source closest to the requested \"width\" is selected using\n   * the \"pixelWidth\". The slight preference is given to the bigger sources to\n   * ensure the most optimal quality.\n   *\n   * In a DPR-based source, the source's DPR is used to return the source that\n   * is closest to the requested DPR.\n   *\n   * Based on\n   * http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n   * @param {number} width\n   * @param {number} dpr\n   * @return {string}\n   */\n\n\n  srcset__createClass(Srcset, [{\n    key: \"select\",\n    value: function select(width, dpr) {\n      // dev().assert(width, \"width=%s\", width);\n      // dev().assert(dpr, \"dpr=%s\", dpr);\n      var index = 0;\n      if (this.widthBased_) {\n        index = this.selectByWidth_(width * dpr);\n      } else {\n        index = this.selectByDpr_(dpr);\n      }\n      return this.sources_[index].url;\n    }\n\n    /**\n     * @param {number} width\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"selectByWidth_\",\n    value: function selectByWidth_(width) {\n      var sources = this.sources_;\n      var minIndex = 0;\n      var minScore = Infinity;\n      var minWidth = Infinity;\n\n      for (var i = 0; i < sources.length; i++) {\n        var sWidth = sources[i].width;\n        var score = Math.abs(sWidth - width);\n\n        // Select the one that is closer with a slight preference toward larger\n        // widths. If smaller size is closer, enforce minimum ratio to ensure\n        // image isn't too distorted.\n        if (score <= minScore * 1.1 || width / minWidth > 1.2) {\n          minIndex = i;\n          minScore = score;\n          minWidth = sWidth;\n        } else {\n          break;\n        }\n      }\n      return minIndex;\n    }\n\n    /**\n     * @param {number} dpr\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"selectByDpr_\",\n    value: function selectByDpr_(dpr) {\n      var sources = this.sources_;\n      var minIndex = 0;\n      var minScore = Infinity;\n\n      for (var i = 0; i < sources.length; i++) {\n        var score = Math.abs(sources[i].dpr - dpr);\n        if (score <= minScore) {\n          minIndex = i;\n          minScore = score;\n        } else {\n          break;\n        }\n      }\n      return minIndex;\n    }\n\n    /**\n     * Returns all URLs in the srcset.\n     * @return {!Array<string>}\n     */\n\n  }, {\n    key: \"getUrls\",\n    value: function getUrls() {\n      return this.sources_.map(function (s) {\n        return s.url;\n      });\n    }\n\n    /**\n     * Reconstructs the string expression for this srcset.\n     * @param {function(string):string=} opt_mapper\n     * @return {string}\n     */\n\n  }, {\n    key: \"stringify\",\n    value: function stringify(opt_mapper) {\n      var res = [];\n      var sources = this.sources_;\n      for (var i = 0; i < sources.length; i++) {\n        var source = sources[i];\n        var src = source.url;\n        if (opt_mapper) {\n          src = opt_mapper(src);\n        }\n        if (this.widthBased_) {\n          src += \" \" + source.width + \"w\";\n        } else {\n          src += \" \" + source.dpr + \"x\";\n        }\n        res.push(src);\n      }\n      return res.join(\", \");\n    }\n  }]);\n\n  return Srcset;\n}();\n\nfunction sortByWidth(s1, s2) {\n  // user().assert(s1.width != s2.width, \"Duplicate width: %s\", s1.width);\n  return s1.width - s2.width;\n}\n\nfunction sortByDpr(s1, s2) {\n  // user().assert(s1.dpr != s2.dpr, \"Duplicate dpr: %s\", s1.dpr);\n  return s1.dpr - s2.dpr;\n}\n// CONCATENATED MODULE: ./src/mixin/index.js\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar mixin__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar mixin__get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction mixin__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction mixin__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction mixin__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// # src / mixin / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// Importing the hy-compontent base libary,\n// which helps with making multiple versions of the component (Vanilla JS, WebComponent, etc...).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// A set of [Modernizr] tests that are required for this component to work.\nvar MIXIN_FEATURE_TESTS = new _Set([].concat(_toConsumableArray(COMPONENT_FEATURE_TESTS), [\"eventlistener\", \"queryselector\", \"requestanimationframe\"]));\n\nvar mixin_imageMixin = function imageMixin(C) {\n  return function (_rxjsMixin) {\n    mixin__inherits(_class, _rxjsMixin);\n\n    function _class() {\n      mixin__classCallCheck(this, _class);\n\n      return mixin__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    mixin__createClass(_class, [{\n      key: \"setupComponent\",\n\n\n      // ### Setup\n      // Calling the [setup observables function](./setup.md) function.\n      value: function setupComponent(el, props) {\n        mixin__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"setupComponent\", this).call(this, el, props);\n        this.loadImage$ = new Subject_Subject();\n      }\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {\n        var _this2 = this;\n\n        this.img = document.createElement(\"img\");\n        this.sizer = document.createElement(\"div\");\n\n        // TODO: update loading when dom changes... use shadow dom after all?\n        this.loading = this.el.querySelector('[slot=\"loading\"]');\n        if (this.loading) this.sizer.appendChild(this.loading);\n\n        // TODO: don't force inline styles\n        if (hasCSSOM) this.img.attributeStyleMap.set(\"display\", \"block\");else this.img.style.display = \"block\";\n\n        this.el.appendChild(this.sizer);\n\n        requestIdleCallback(function () {\n          // TODO: This triggers are layout event for every hy-img,\n          // but we need to get the width of the image somehow.\n          var initialRect = { contentRect: _this2.el.getBoundingClientRect() };\n\n          var resize$ = \"ResizeObserver\" in window ? createResizeObservable(_this2.el).pipe(startWith(initialRect)) : of(initialRect);\n\n          var sizerStyle$ = combineLatest_combineLatest(resize$, _this2.subjects.width, _this2.subjects.height).pipe(takeUntil(_this2.subjects.disconnect)).subscribe(_this2.updateSizerStyle.bind(_this2));\n\n          var isIntersecting$ = combineLatest_combineLatest(_this2.subjects.root, _this2.subjects.rootMargin).pipe(takeUntil(_this2.subjects.disconnect), switchMap(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                root = _ref2[0],\n                rootMargin = _ref2[1];\n\n            return \"IntersectionObserver\" in window ? createIntersectionObservable(_this2.el, { root: root, rootMargin: rootMargin }) : of({ isIntersecting: true });\n          }), map(function (_ref3) {\n            var isIntersecting = _ref3.isIntersecting;\n            return isIntersecting;\n          }), merge_merge(_this2.loadImage$), share());\n\n          isIntersecting$.pipe(filter(function (x) {\n            return x;\n          }), distinctUntilChanged()).subscribe(function () {\n            // TODO: polyfill?\n            var cache = _this2.cache = new Map();\n\n            var srcset$ = combineLatest_combineLatest(_this2.subjects.src, _this2.subjects.srcset).pipe(filter(function (_ref4) {\n              var _ref5 = _slicedToArray(_ref4, 2),\n                  a = _ref5[0],\n                  b = _ref5[1];\n\n              return a != null || b != null;\n            }), distinctUntilChanged(function (_ref6, _ref7) {\n              var _ref9 = _slicedToArray(_ref6, 2),\n                  p1 = _ref9[0],\n                  p2 = _ref9[1];\n\n              var _ref8 = _slicedToArray(_ref7, 2),\n                  q1 = _ref8[0],\n                  q2 = _ref8[1];\n\n              return p1 === q1 && p2 === q2;\n            }), map(function (_ref10) {\n              var _ref11 = _slicedToArray(_ref10, 2),\n                  src = _ref11[0],\n                  srcset = _ref11[1];\n\n              return srcset ? parseSrcset(srcset) : srcsetFromSrc(src);\n            }));\n\n            var url$ = combineLatest_combineLatest(resize$, srcset$).pipe(map(_this2.selectImgURL.bind(_this2)), distinctUntilKeyChanged(\"href\"));\n\n            var isIntersecting2$ = isIntersecting$.pipe(startWith(true), distinctUntilChanged());\n\n            var img$ = combineLatest_combineLatest(url$, isIntersecting2$).pipe(takeUntil(_this2.subjects.disconnect), tap(function () {\n              return _this2.loading && _this2.loading.removeAttribute(\"hidden\");\n            }), switchMap(_this2.makeRequest.bind(_this2)), switchMap(_this2.setImgSrcAndLoad.bind(_this2)));\n\n            // #### Subscriptions\n            // Whenever the object URL changes, we set the new image source.\n            img$.subscribe(function () {\n              return requestAnimationFrame(function () {\n                if (_this2.sizer.parentNode != null) _this2.el.removeChild(_this2.sizer);\n                if (_this2.img.parentNode == null) _this2.el.appendChild(_this2.img);\n              });\n            },\n\n            // In case of an error, we just set all the original attributes on the image\n            // and let the browser handle the rest.\n            function (err) {\n              if (false) console.error(err);\n              _this2.loadImageFallback();\n            });\n\n            // Keeping other properties up-to-date.\n            _this2.updateAttr = _this2.updateAttr.bind(_this2);\n            _this2.subjects.alt.subscribe(_this2.updateAttr(\"alt\"));\n            _this2.subjects.decoding.subscribe(_this2.updateAttr(\"decoding\"));\n            _this2.subjects.longdesc.subscribe(_this2.updateAttr(\"longdesc\"));\n\n            /* TODO: necessary? */\n            _this2.subjects.ismap.subscribe(_this2.updateAttr(\"ismap\"));\n            _this2.subjects.usemap.subscribe(_this2.updateAttr(\"usemap\"));\n          });\n\n          // TODO: meh..\n          mixin__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"connectComponent\", _this2).call(_this2);\n\n          // Firing an event to let the outside world know the drawer is ready.\n          _this2.fireEvent(\"init\");\n        });\n      }\n    }, {\n      key: \"selectImgURL\",\n      value: function selectImgURL(_ref12) {\n        var _ref13 = _slicedToArray(_ref12, 2),\n            intersectionEntry = _ref13[0],\n            srcsetObj = _ref13[1];\n\n        var width = intersectionEntry.contentRect.width;\n\n\n        return new URL(srcsetObj.select(width || window.screen.width, window.devicePixelRatio || 1), window.location);\n      }\n\n      // TODO: rename?\n      // TODO: doc\n\n    }, {\n      key: \"makeRequest\",\n      value: function makeRequest(_ref14) {\n        var _ref15 = _slicedToArray(_ref14, 2),\n            url = _ref15[0],\n            isIntersecting = _ref15[1];\n\n        var href = url.href;\n        var cache = this.cache;\n\n\n        if (isIntersecting && !cache.has(href)) {\n          return ajax({\n            method: \"GET\",\n            responseType: \"blob\",\n            url: url,\n            crossDomain: isExternal(url)\n          }).pipe(map(function (_ref16) {\n            var response = _ref16.response;\n            return URL.createObjectURL(response);\n          }), tap(function (objectURL) {\n            return cache.set(href, objectURL);\n          }));\n        } else if (cache.has(href)) {\n          return of(cache.get(href));\n        } else {\n          return never();\n        }\n      }\n    }, {\n      key: \"setImgSrcAndLoad\",\n      value: function setImgSrcAndLoad(url) {\n        var load$ = fromEvent(this.img, \"load\");\n        this.img.src = url;\n        return load$;\n      }\n\n      // Reflect attributes changes on the original on the inner img.\n\n    }, {\n      key: \"updateAttr\",\n      value: function updateAttr(name) {\n        var _this3 = this;\n\n        return function (x) {\n          return x == null || x === false ? _this3.img.removeAttribute(name) : _this3.img.setAttribute(name, x === true ? \"\" : x);\n        };\n        /* return x => (x == null ? this.img.removeAttribute(name) : this.img.setAttribute(name, x));\n         */\n      }\n    }, {\n      key: \"loadImageFallback\",\n      value: function loadImageFallback() {\n        var _this4 = this;\n\n        if (this.el.hasAttribute(\"sizes\")) this.img.setAttribute(\"sizes\", this.getAttribute(\"sizes\"));\n        if (this.el.hasAttribute(\"crossorigin\")) this.img.setAttribute(\"crossorigin\", this.getAttribute(\"crossorigin\"));\n        if (this.el.hasAttribute(\"referrerpolicy\")) this.img.setAttribute(\"referrerpolicy\", this.getAttribute(\"referrerpolicy\"));\n\n        /* TODO: pass on width/height? */\n\n        if (this.srcset) this.img.srcset = this.srcset;\n        if (this.src) this.img.src = this.src;\n\n        requestAnimationFrame(function () {\n          if (_this4.sizer.parentNode != null) _this4.el.removeChild(_this4.sizer);\n          if (_this4.img.parentNode == null) _this4.el.appendChild(_this4.img);\n        });\n      }\n    }, {\n      key: \"updateSizerStyle\",\n      value: function updateSizerStyle(_ref17) {\n        var _ref18 = _slicedToArray(_ref17, 3),\n            intersectionEntry = _ref18[0],\n            width = _ref18[1],\n            height = _ref18[2];\n\n        var contentWidth = intersectionEntry.contentRect.width;\n\n\n        if (hasCSSOM) {\n          this.sizer.attributeStyleMap.set(\"position\", \"relative\");\n          if (width != null && height != null) {\n            if (width >= contentWidth) {\n              this.sizer.attributeStyleMap.set(\"width\", CSS.percent(100));\n              this.sizer.attributeStyleMap.set(\"padding-top\", CSS.percent(height / width * 100));\n            } else {\n              this.sizer.attributeStyleMap.set(\"width\", CSS.px(width));\n              this.sizer.attributeStyleMap.set(\"height\", CSS.px(height));\n            }\n          } else {\n            this.sizer.attributeStyleMap.set(\"width\", CSS.percent(100));\n            this.sizer.attributeStyleMap.set(\"height\", CSS.percent(100));\n          }\n        } else {\n          this.sizer.style.position = \"relative\";\n          if (width != null && height != null) {\n            if (width >= contentWidth) {\n              this.sizer.style.width = \"100%\";\n              this.sizer.style.paddingTop = height / width * 100 + \"%\";\n            } else {\n              this.sizer.style.width = width + \"px\";\n              this.sizer.style.height = height + \"px\";\n            }\n          } else {\n            this.sizer.style.width = \"100%\";\n            this.sizer.style.height = \"100%\";\n          }\n        }\n      }\n    }, {\n      key: \"disconnectComponent\",\n      value: function disconnectComponent() {\n        mixin__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"disconnectComponent\", this).call(this);\n\n        if (this.cache) {\n          this.cache.forEach(function (objURL) {\n            /* if (process.env.DEBUG) console.log(\"revoke\", objURL); */\n            URL.revokeObjectURL(objURL);\n          });\n        }\n      }\n\n      // ## Methods\n\n    }, {\n      key: \"loadImage\",\n      value: function loadImage() {\n        this.loadImage$.next(true);\n      }\n    }], [{\n      key: \"componentName\",\n      get: function get() {\n        return \"hy-img\";\n      }\n    }, {\n      key: \"defaults\",\n      get: function get() {\n        return {\n          root: null,\n          rootMargin: \"0px\",\n          src: null,\n          srcset: null,\n          width: null,\n          height: null,\n          alt: null,\n          decoding: null,\n          longdesc: null,\n          ismap: false,\n          usemap: null\n          /* referrerpolicy: null, */\n        };\n      }\n    }, {\n      key: \"types\",\n      get: function get() {\n        return {\n          root: string,\n          rootMargin: string,\n          src: string,\n          srcset: string,\n          width: number,\n          height: number,\n          alt: string,\n          decoding: oneOf([\"sync\", \"async\", \"auto\"]),\n          longdesc: string,\n          ismap: bool,\n          usemap: string\n          /*\n          referrerpolicy: oneOf([\n            \"no-referrer\",\n            \"no-referrer-when-downgrade\",\n            \"origin\",\n            \"origin-when-cross-origin\",\n            \"unsafe-url\"\n          ]),\n          */\n        };\n      }\n    }]);\n\n    return _class;\n  }(rxjs_rxjsMixin(componentMixin(C)));\n};\n// CONCATENATED MODULE: ./src/jquery/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JQUERY_FEATURE_TESTS\", function() { return JQUERY_FEATURE_TESTS; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Set\", function() { return _Set; });\nvar jquery__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction jquery__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction jquery__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction jquery__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction jquery__toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// # src / jquery / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// import 'core-js/fn/array/from';\n\n\n\n\n\nvar JQUERY_FEATURE_TESTS = new _Set([].concat(jquery__toConsumableArray(MIXIN_FEATURE_TESTS)));\nJQUERY_FEATURE_TESTS.delete(\"customevent\");\n\n\n\ndefineJQueryComponent(\"hy.img\", function (_imageMixin) {\n  jquery__inherits(_class, _imageMixin);\n\n  function _class() {\n    jquery__classCallCheck(this, _class);\n\n    return jquery__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n  }\n\n  jquery__createClass(_class, [{\n    key: \"setupShadowDOM\",\n    value: function setupShadowDOM($el) {\n      return $el;\n    }\n  }]);\n\n  return _class;\n}(mixin_imageMixin(JQueryComponent)));\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3809e99d5a8c6b925f4b","// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n/*@__PURE__*/ (function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\nexport { _root as root };\n//# sourceMappingURL=root.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/root.js","// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n/* eslint-disable no-plusplus */\n\nexport function parseType(type, attr) {\n  if (process.env.DEBUG && !type) {\n    return console.warn(`No type provided for attribute ${attr}.`);\n  }\n  return type ? type(attr) : attr;\n}\n\nexport function decamelize(str, sep = \"-\") {\n  return str\n    .replace(/([a-z\\d])([A-Z])/g, `$1${sep}$2`)\n    .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, `$1${sep}$2`)\n    .toLowerCase();\n}\n\nfunction preserveCamelCase(strarg) {\n  let str = strarg;\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i);\n\n    if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n      str = `${str.substr(0, i)}-${str.substr(i)}`;\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (\n      isLastCharUpper &&\n      isLastLastCharUpper &&\n      /[a-zA-Z]/.test(c) &&\n      c.toLowerCase() === c\n    ) {\n      str = `${str.substr(0, i - 1)}-${str.substr(i - 1)}`;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = c.toLowerCase() === c;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = c.toUpperCase() === c;\n    }\n  }\n\n  return str;\n}\n\nexport function camelCase(...args) {\n  let str = [].map\n    .call(args, x => x.trim())\n    .filter(x => x.length)\n    .join(\"-\");\n\n  if (str.length === 0) {\n    return \"\";\n  }\n\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  str = preserveCamelCase(str);\n\n  return str\n    .replace(/^[_.\\- ]+/, \"\")\n    .toLowerCase()\n    .replace(/[_.\\- ]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/common.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isFunction.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isObject.js","/** PURE_IMPORTS_START ._errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/tryCatch.js","/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport var Subscription = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subscription.js","/** PURE_IMPORTS_START ._util_isFunction,._Subscription,._Observer,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isFunction } from './util/isFunction';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport var Subscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subscriber.js","/** PURE_IMPORTS_START .._Subscriber,.._symbol_rxSubscriber,.._Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/toSubscriber.js","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/noop.js","/** PURE_IMPORTS_START ._noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/pipe.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isScheduler.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isPromise.js","/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\nimport { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        var iterator = result[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        var obs = result[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/subscribeToResult.js","/** PURE_IMPORTS_START .._util_isScheduler,.._util_isArray,._ArrayObservable,.._operators_combineLatest PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operators/combineLatest';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/combineLatest.js","/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromEventObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable));\n//# sourceMappingURL=FromEventObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/FromEventObservable.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport var MapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/map.js","/** PURE_IMPORTS_START .._.._util_root,.._.._util_tryCatch,.._.._util_errorObject,.._.._Observable,.._.._Subscriber,.._.._operators_map PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators/map';\nfunction getCORSRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else if (!!root.XDomainRequest) {\n        return new root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nexport function ajaxGet(url, headers) {\n    if (headers === void 0) {\n        headers = null;\n    }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\n;\nexport function ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\n;\nexport function ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\n;\nexport function ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\n;\nexport function ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\n;\nvar mapResponse = /*@__PURE__*/ map(function (x, index) { return x.response; });\nexport function ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var AjaxObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    /** @deprecated internal use only */ AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AjaxSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch(createXHR).call(request);\n        if (xhr === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject) {\n                this.error(errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n            if (result === errorObject) {\n                this.error(errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root.FormData && body instanceof root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber));\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport var AjaxResponse = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport var AjaxError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport var AjaxTimeoutError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\n//# sourceMappingURL=AjaxObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/dom/AjaxObservable.js","/** PURE_IMPORTS_START .._Subscriber,.._util_tryCatch,.._util_errorObject PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/distinctUntilChanged.js","/** PURE_IMPORTS_START ._distinctUntilChanged PURE_IMPORTS_END */\nimport { distinctUntilChanged } from './distinctUntilChanged';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/distinctUntilKeyChanged.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/filter.js","/** PURE_IMPORTS_START .._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexport var MergeMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var MergeMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=mergeMap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mergeMap.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/identity.js","/** PURE_IMPORTS_START ._mergeMap,.._util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, null, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mergeAll.js","/** PURE_IMPORTS_START .._Observable,._ArrayObservable,.._util_isScheduler,.._operators_mergeAll PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(new ArrayObservable(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/merge.js","/** PURE_IMPORTS_START .._observable_merge PURE_IMPORTS_END */\nimport { merge as mergeStatic } from '../observable/merge';\nexport { merge as mergeStatic } from '../observable/merge';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(mergeStatic.apply(void 0, [source].concat(observables))); };\n}\n//# sourceMappingURL=merge.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/merge.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/refCount.js","/** PURE_IMPORTS_START .._observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport var MulticastOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\n//# sourceMappingURL=multicast.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/multicast.js","/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n;\n//# sourceMappingURL=share.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/share.js","/** PURE_IMPORTS_START .._util_root,.._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var PromiseObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable));\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/PromiseObservable.js","/** PURE_IMPORTS_START .._util_root,.._Observable,.._symbol_iterator PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IteratorObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable));\nvar StringIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = str.length;\n        }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[Symbol_iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = toLength(arr);\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[Symbol_iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[Symbol_iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[Symbol_iterator]();\n}\nvar maxSafeInteger = /*@__PURE__*/ Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/IteratorObservable.js","/** PURE_IMPORTS_START ._mergeAll PURE_IMPORTS_END */\nimport { mergeAll } from './mergeAll';\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/concatAll.js","/** PURE_IMPORTS_START .._util_isScheduler,._of,._from,.._operators_concatAll PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n        return from(observables[0]);\n    }\n    return concatAll()(of.apply(void 0, observables));\n}\n//# sourceMappingURL=concat.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/concat.js","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concatStatic(new ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concatStatic(new ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concatStatic(new EmptyObservable(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/startWith.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/switchMap.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/takeUntil.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/tap.js","// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Observable } from \"rxjs/_esm5/Observable\";\n\nexport const hasCSSOM = \"attributeStyleMap\" in Element.prototype && \"CSS\" in window && CSS.number;\n\nexport const createXObservable = X => (el, cOpts, oOpts) =>\n  Observable.create(obs => {\n    const next = obs.next.bind(obs);\n    const observer = new X(xs => Array.from(xs).forEach(next), cOpts);\n    /* if (process.env.DEBUG) console.log(\"observe\", X.name); */\n    observer.observe(el, oOpts);\n    return () => {\n      /* if (process.env.DEBUG) console.log(\"unobserve\", X.name); */\n      observer.unobserve(el);\n    };\n  });\n\nexport const createIntersectionObservable = createXObservable(window.IntersectionObserver);\nexport const createResizeObservable = createXObservable(window.ResizeObserver);\n\n/* export const idle = x => new Promise(res => requestIdleCallback(() => res(x))); */\n/* export const anim = x => new Promise(res => requestAnimationFrame(() => res(x))); */\n\n// Consider a URL external if either the protocol, hostname or port is different.\nexport function isExternal({ protocol, host }, location = window.location) {\n  return protocol !== location.protocol || host !== location.host;\n}\n\n/*\nfunction blobToDataURL(blob) {\n  return new Promise((res, rej) => {\n    const a = new FileReader();\n    a.onload = ({ target: { result } }) => res(result);\n    a.onerror = rej;\n    a.readAsDataURL(blob);\n  });\n}\n*/\n\n/*\nconst createObjectURL = blob =>\n  Observable.create(obs => {\n    const objURL = URL.createObjectURL(blob);\n    obs.next(objURL);\n    return () => {\n      if (process.env.DEBUG) console.log(\"revoke\", objURL);\n      URL.revokeObjectURL(objURL);\n    };\n  });\n*/\n\n\n\n// WEBPACK FOOTER //\n// ./src/common.js","// Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// <http://www.apache.org/licenses/LICENSE-2.0>\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// import { dev, user } from \"./log\";\n\n/**\n * A single source within a srcset. Only one: width or DPR can be specified at\n * a time.\n * @typedef {{\n *   url: string,\n *   width: (number|undefined),\n *   dpr: (number|undefined)\n * }}\n */\nlet SrcsetSourceDef;\n\n/**\n * General grammar: (URL [NUM[w|x]],)*\n * Example 1: \"image1.png 100w, image2.png 50w\"\n * Example 2: \"image1.png 2x, image2.png\"\n * Example 3: \"image1,100w.png 100w, image2.png 50w\"\n */\nconst srcsetRegex = /(\\S+)(?:\\s+(?:(-?\\d+(?:\\.\\d+)?)([a-zA-Z]*)))?\\s*(?:,|$)/g;\n\n/**\n * Extracts `srcset` and fallbacks to `src` if not available.\n * @param {!Element} element\n * @return {!Srcset}\n */\nexport function srcsetFromElement(element) {\n  const srcsetAttr = element.getAttribute(\"srcset\");\n  if (srcsetAttr) {\n    return parseSrcset(srcsetAttr);\n  }\n  // We can't push `src` via `parseSrcset` because URLs in `src` are not always\n  // RFC compliant and can't be easily parsed as an `srcset`. For instance,\n  // they sometimes contain space characters.\n  const srcAttr = element.getAttribute(\"src\");\n  return srcsetFromSrc(srcAttr);\n}\n\n/**\n * Creates a Srcset from a `src` attribute value.\n * @param {string} src\n * @return {!Srcset}\n */\nexport function srcsetFromSrc(src) {\n  return new Srcset([{ url: src, width: undefined, dpr: 1 }]);\n}\n\n/**\n * Parses the text representation of srcset into Srcset object.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes.\n * See http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n * @param {string} s\n * @return {!Srcset}\n */\nexport function parseSrcset(s) {\n  const sources = [];\n  let match;\n  while ((match = srcsetRegex.exec(s))) {\n    const url = match[1];\n    let width, dpr;\n    if (match[2]) {\n      const type = match[3].toLowerCase();\n      if (type == \"w\") {\n        width = parseInt(match[2], 10);\n      } else if (type == \"x\") {\n        dpr = parseFloat(match[2]);\n      } else {\n        continue;\n      }\n    } else {\n      // If no \"w\" or \"x\" specified, we assume it's \"1x\".\n      dpr = 1;\n    }\n    sources.push({ url, width, dpr });\n  }\n  return new Srcset(sources);\n}\n\n/**\n * A srcset object contains one or more sources.\n *\n * There are two types of sources: width-based and DPR-based. Only one type\n * of sources allowed to be specified within a single srcset. Depending on a\n * usecase, the components are free to choose any source that best corresponds\n * to the required rendering quality and network and CPU conditions. See\n * \"select\" method for details on how this selection is performed.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes\n */\nexport class Srcset {\n  /**\n   * @param {!Array<!SrcsetSourceDef>} sources\n   */\n  constructor(sources) {\n    // user().assert(sources.length > 0, \"Srcset must have at least one source\");\n    /** @private @const {!Array<!SrcsetSourceDef>} */\n    this.sources_ = sources;\n\n    // Only one type of source specified can be used - width or DPR.\n    let hasWidth = false;\n    let hasDpr = false;\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      hasWidth = hasWidth || !!source.width;\n      hasDpr = hasDpr || !!source.dpr;\n    }\n    // user().assert(!!(hasWidth ^ hasDpr), \"Srcset must have width or dpr sources, but not both\");\n\n    // Source and assert duplicates.\n    sources.sort(hasWidth ? sortByWidth : sortByDpr);\n\n    /** @private @const {boolean} */\n    this.widthBased_ = hasWidth;\n\n    /** @private @const {boolean} */\n    this.dprBased_ = hasDpr;\n  }\n\n  /**\n   * Performs selection for specified width and DPR. Here, width is the width\n   * in screen pixels and DPR is the device-pixel-ratio or pixel density of\n   * the device. Depending on the circumstances, such as low network conditions,\n   * it's possible to manipulate the result of this method by passing a lower\n   * DPR value.\n   *\n   * The source selection depends on whether this is width-based or DPR-based\n   * srcset.\n   *\n   * In a width-based source, the source's width is the physical width of a\n   * resource (e.g. an image). Depending on the provided DPR, this width is\n   * converted to the screen pixels as following:\n   *   pixelWidth = sourceWidth / DPR\n   *\n   * Then, the source closest to the requested \"width\" is selected using\n   * the \"pixelWidth\". The slight preference is given to the bigger sources to\n   * ensure the most optimal quality.\n   *\n   * In a DPR-based source, the source's DPR is used to return the source that\n   * is closest to the requested DPR.\n   *\n   * Based on\n   * http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n   * @param {number} width\n   * @param {number} dpr\n   * @return {string}\n   */\n  select(width, dpr) {\n    // dev().assert(width, \"width=%s\", width);\n    // dev().assert(dpr, \"dpr=%s\", dpr);\n    let index = 0;\n    if (this.widthBased_) {\n      index = this.selectByWidth_(width * dpr);\n    } else {\n      index = this.selectByDpr_(dpr);\n    }\n    return this.sources_[index].url;\n  }\n\n  /**\n   * @param {number} width\n   * @return {number}\n   * @private\n   */\n  selectByWidth_(width) {\n    const sources = this.sources_;\n    let minIndex = 0;\n    let minScore = Infinity;\n    let minWidth = Infinity;\n\n    for (let i = 0; i < sources.length; i++) {\n      const sWidth = sources[i].width;\n      const score = Math.abs(sWidth - width);\n\n      // Select the one that is closer with a slight preference toward larger\n      // widths. If smaller size is closer, enforce minimum ratio to ensure\n      // image isn't too distorted.\n      if (score <= minScore * 1.1 || width / minWidth > 1.2) {\n        minIndex = i;\n        minScore = score;\n        minWidth = sWidth;\n      } else {\n        break;\n      }\n    }\n    return minIndex;\n  }\n\n  /**\n   * @param {number} dpr\n   * @return {number}\n   * @private\n   */\n  selectByDpr_(dpr) {\n    const sources = this.sources_;\n    let minIndex = 0;\n    let minScore = Infinity;\n\n    for (let i = 0; i < sources.length; i++) {\n      const score = Math.abs(sources[i].dpr - dpr);\n      if (score <= minScore) {\n        minIndex = i;\n        minScore = score;\n      } else {\n        break;\n      }\n    }\n    return minIndex;\n  }\n\n  /**\n   * Returns all URLs in the srcset.\n   * @return {!Array<string>}\n   */\n  getUrls() {\n    return this.sources_.map(s => s.url);\n  }\n\n  /**\n   * Reconstructs the string expression for this srcset.\n   * @param {function(string):string=} opt_mapper\n   * @return {string}\n   */\n  stringify(opt_mapper) {\n    const res = [];\n    const sources = this.sources_;\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      let src = source.url;\n      if (opt_mapper) {\n        src = opt_mapper(src);\n      }\n      if (this.widthBased_) {\n        src += ` ${source.width}w`;\n      } else {\n        src += ` ${source.dpr}x`;\n      }\n      res.push(src);\n    }\n    return res.join(\", \");\n  }\n}\n\nfunction sortByWidth(s1, s2) {\n  // user().assert(s1.width != s2.width, \"Duplicate width: %s\", s1.width);\n  return s1.width - s2.width;\n}\n\nfunction sortByDpr(s1, s2) {\n  // user().assert(s1.dpr != s2.dpr, \"Duplicate dpr: %s\", s1.dpr);\n  return s1.dpr - s2.dpr;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/srcset.js","var _Set = typeof Set !== 'undefined' && new Set([1]).size === 1 ? Set : function () {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  a = a.filter(function (x, i) {\n    return i === a.indexOf(x);\n  });\n  a.size = a.length;\n  a.has = function (x) {\n    return a.indexOf(x) > -1;\n  };\n  a.add = function (x) {\n    if (!a.has(x)) {\n      a.size++;a.push(x);\n    }return a;\n  };\n  a.delete = function (x) {\n    var t = void 0;if (t = a.has(x)) {\n      a.size--;a.splice(a.indexOf(x), 1);\n    }return t;\n  };\n  a.clear = function () {\n    while (a.pop()) {}a.size = 0;\n  };\n  return a;\n};\n\nexport { _Set as Set };\n\n\n// WEBPACK FOOTER //\n// ./node_modules/qd-set/esm/index.js","// # src / vanilla.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\nimport { Set } from \"qd-set\";\n\nexport { Set };\n\nexport class VanillaComponent {\n  constructor(el, props) {\n    this.setupComponent(el, props);\n    this.connectComponent();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/vanilla.js","// # src / define-jquery-compnent.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// jQuery predates arrow functions and makes use of binding a functions's `this`,\n// so that passing arrow functions results in errors in many cases.\n// We modify eslint to allow passing anonymous `function`s:\n/* eslint-disable func-names, consistent-return */\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/keys';\n\n// jQuery is an optional dependency\nimport $ from \"jquery\"; // eslint-disable-line import/no-extraneous-dependencies\n\nimport { Set } from \"qd-set\";\n\nimport { parseType } from \"./common\";\nimport { VanillaComponent } from \"./vanilla\";\n\nexport { Set };\n\nexport const JQueryComponent = VanillaComponent;\n\nexport function defineJQueryComponent(name, Component) {\n  const ns = name.toLowerCase();\n\n  const Constructor = class extends Component {\n    setupShadowDOM(el) {\n      this.$element = super.setupShadowDOM($(el));\n      return this.$element[0];\n    }\n\n    fireEvent(eventName, data) {\n      const event = $.Event(`${eventName}.${ns}`, data);\n      this.$element.trigger(event);\n    }\n  };\n\n  function plugin(option, arg, ...args) {\n    const key = typeof option === \"string\" ? option : null;\n\n    return this.each(function() {\n      const $this = $(this);\n      const data = $this.data(ns);\n\n      if (!data) {\n        const { defaults, types } = Component;\n        const dataProps = $this.data();\n\n        Object.keys(defaults).forEach(dft => {\n          if (dataProps[dft]) {\n            const value = parseType(types[dft], dataProps[dft]);\n            dataProps[dft] = value != null ? value : Component.defaults[dft];\n          }\n        });\n        const props = $.extend({}, dataProps, typeof option === \"object\" && option);\n\n        $this.data(ns, new Constructor(this, props));\n      } else if (key && typeof data[key] === \"function\") {\n        data[key](arg, ...args);\n      } else if (typeof option === \"object\" && option) {\n        $.extend(data, option);\n      }\n    });\n  }\n\n  const fName = ns.split(\".\").pop();\n\n  const old = $.fn[fName];\n\n  $.fn[fName] = plugin;\n  $.fn[fName].Constructor = Constructor;\n\n  $.fn[fName].noConflict = function() {\n    $.fn[fName] = old;\n    return this;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/define-jquery-component.js","// # src / component.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/assign';\n// import 'core-js/fn/object/define-property';\n// import 'core-js/fn/object/keys';\n\nimport { Set } from \"qd-set\";\n\nexport { Set };\n\nexport const COMPONENT_FEATURE_TESTS = new Set([\"customevent\"]);\n\nconst aSymbol = Symbol || (x => `_${x}`);\nconst sRoot = aSymbol(\"sroot\");\nconst sState = aSymbol(\"state\");\n\nwindow.process = window.process || {};\nwindow.process.env = window.process.env || {};\n\nwindow.requestIdleCallback = window.requestIdleCallback || (f => window.setTimeout(f, 0));\nwindow.cancelIdleCallback = window.cancelIdleCallback || window.clearTimeout;\n\nclass Component {}\n\nexport const componentMixin = (C = Component) =>\n  class extends C {\n    get sroot() {\n      return this.getRoot();\n    }\n\n    get el() {\n      return this.getEl();\n    }\n\n    setupComponent(el, state) {\n      const { defaults } = this.constructor;\n\n      if (process.env.DEBUG) {\n        const { componentName, sideEffects } = this.constructor;\n        if (!componentName) {\n          console.warn(\n            \"Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.\"\n          );\n        }\n        if (!defaults) {\n          console.warn(\n            \"No default properties provided. Implement a static getter called `defaults`.\"\n          );\n        }\n        if (!sideEffects) {\n          console.warn(\"No side effects provided. Implement a static getter called `sideEffects`.\");\n        }\n      }\n\n      this[sState] = Object.assign({}, defaults, state);\n      this.setupProperties(this);\n      this[sRoot] = this.setupShadowDOM(el);\n    }\n\n    setupShadowDOM(el) {\n      return el;\n    }\n\n    connectComponent() {}\n\n    disconnectComponent() {}\n\n    adoptComponent() {}\n\n    getRoot() {\n      return this[sRoot];\n    }\n\n    getEl() {\n      return this[sRoot];\n    }\n\n    fireEvent(eventName, data) {\n      const { componentName } = this.constructor;\n      const event = new CustomEvent(`${componentName}-${eventName}`, data);\n      this.el.dispatchEvent(event);\n    }\n\n    setInternalState(key, value) {\n      this[sState][key] = value;\n    }\n\n    setupProperties() {\n      const { sideEffects } = this.constructor;\n\n      Object.keys(this[sState]).forEach(key => {\n        const sideEffect = sideEffects[key];\n        this.setupProperty(key, sideEffect);\n      });\n    }\n\n    setupProperty(key, sideEffect) {\n      Object.defineProperty(this, key, {\n        get: () => this[sState][key],\n        set: value => {\n          const oldValue = this[sState][key];\n          this.setInternalState(key, value);\n          if (sideEffect) sideEffect.call(this, value, oldValue);\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/component.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isArray.js","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/errorObject.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport var UnsubscriptionError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/UnsubscriptionError.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Observer.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nvar Symbol = root.Symbol;\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    /*@__PURE__*/ Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/rxSubscriber.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexport var observable = /*@__PURE__*/ getSymbolObservable(root);\n/**\n * @deprecated use observable instead\n */\nexport var $$observable = observable;\n//# sourceMappingURL=observable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/observable.js","/** PURE_IMPORTS_START ._util_root,._util_toSubscriber,._symbol_observable,._util_pipe PURE_IMPORTS_END */\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport var Observable = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\n//# sourceMappingURL=Observable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Observable.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport var ObjectUnsubscribedError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js","/** PURE_IMPORTS_START ._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var SubjectSubscription = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/SubjectSubscription.js","/** PURE_IMPORTS_START ._Observable,._Subscriber,._Subscription,._util_ObjectUnsubscribedError,._SubjectSubscription,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nexport var SubjectSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\n/**\n * @class Subject<T>\n */\nexport var Subject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\n/**\n * @class AnonymousSubject<T>\n */\nexport var AnonymousSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\n//# sourceMappingURL=Subject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subject.js","/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport var Action = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\n//# sourceMappingURL=Action.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/Action.js","/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AsyncAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\n//# sourceMappingURL=AsyncAction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/AsyncAction.js","/** PURE_IMPORTS_START ._AsyncAction PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var QueueAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\n//# sourceMappingURL=QueueAction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/QueueAction.js","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport var Scheduler = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\n//# sourceMappingURL=Scheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Scheduler.js","/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Scheduler } from '../Scheduler';\nexport var AsyncScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\n//# sourceMappingURL=AsyncScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js","/** PURE_IMPORTS_START ._AsyncScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AsyncScheduler } from './AsyncScheduler';\nexport var QueueScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\n//# sourceMappingURL=QueueScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/QueueScheduler.js","/** PURE_IMPORTS_START ._QueueAction,._QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/queue.js","/** PURE_IMPORTS_START ._Observable PURE_IMPORTS_END */\nimport { Observable } from './Observable';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport var Notification = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable.of(this.value);\n            case 'E':\n                return Observable.throw(this.error);\n            case 'C':\n                return Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\n//# sourceMappingURL=Notification.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Notification.js","/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport var ObserveOnOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var ObserveOnSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport var ObserveOnMessage = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\n//# sourceMappingURL=observeOn.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/observeOn.js","/** PURE_IMPORTS_START ._Subject,._scheduler_queue,._Subscription,._operators_observeOn,._util_ObjectUnsubscribedError,._SubjectSubscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport var ReplaySubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nvar ReplayEvent = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/ReplaySubject.js","// # src / rxjs.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\nimport { Subject } from \"rxjs/_esm5/Subject\";\nimport { ReplaySubject } from \"rxjs/_esm5/ReplaySubject\";\n\nexport const rxjsMixin = C =>\n  class extends C {\n    setupComponent(el, opts) {\n      const sideEffects = {};\n\n      this.subjects = {};\n      this.subjects.disconnect = new Subject();\n      this.subjects.document = new ReplaySubject();\n\n      Object.keys(this.constructor.types).map(key => {\n        this.subjects[key] = new ReplaySubject(1);\n        sideEffects[key] = x => this.subjects[key].next(x);\n      });\n\n      Object.defineProperty(this.constructor, \"sideEffects\", {\n        get: () => sideEffects,\n        set: () => {},\n        enumerable: true,\n        configurable: true,\n      });\n\n      super.setupComponent(el, opts);\n    }\n\n    connectComponent() {\n      super.connectComponent();\n      this.subjects.document.next(document);\n      Object.keys(this.constructor.types).map(key => this.subjects[key].next(this[key]));\n    }\n\n    disconnectComponent() {\n      super.disconnectComponent();\n      this.subjects.disconnect.next({});\n    }\n\n    adaptComponent() {\n      super.adaptComponent();\n      this.subjects.document.next(document);\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/rxjs.js","export const array = (attr) => {\n  if (attr == null) return null;\n\n  const str = attr.trim()\n    .replace(/^\\[?(.*?)\\]?$/, '$1')\n    .split(',')\n    .map(x => x.trim());\n\n  return str || null;\n};\n\narray.stringify = a => (a && a.length > 0 ? a.join(',') : null);\n\nexport default array;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/array.js","export const bool = (attr) => {\n  if (attr == null) return false;\n  const attr2 = (attr.trim && attr.trim()) || attr;\n  return !(\n    attr2 === 'false' ||\n    attr2 === 'null' ||\n    attr2 === 'undefined' ||\n    attr2 === '0' ||\n    attr2 === false\n  );\n};\n\nbool.stringify = b => (b ? '' : null);\n\nexport default bool;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/bool.js","export const number = (attr) => {\n  if (attr == null) return null;\n  return Number(attr);\n};\n\nnumber.stringify = (n) => {\n  if (n == null) return null;\n  return `${n}`;\n};\n\nexport default number;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/number.js","export const oneOf = (alts) => {\n  const f = (attr) => {\n    if (attr == null) return null;\n\n    const i = alts.indexOf(attr);\n    if (process.env.DEBUG && i === -1) {\n      console.warn(`'${attr}' is not 'oneOf': ${alts.join(', ')}`);\n    }\n\n    return i > -1 ? alts[i] : null;\n  };\n\n  f.stringify = o => (alts.indexOf(o) !== -1 ? o : null);\n\n  return f;\n};\n\nexport default oneOf;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/one-of.js","export const regex = (attr) => {\n  if (attr == null) return null;\n  const attr2 = (attr.trim && attr.trim()) || attr;\n  const match = attr2.match(/^\\/?(.*?)(\\/([gimy]*))?$/);\n  return new RegExp(match[1], match[3]);\n};\n\nregex.stringify = r => (r && r.toString()) || null;\n\nexport default regex;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/regex.js","export const string = attr => attr;\n\nstring.stringify = s => s;\n\nexport default string;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/string.js","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ScalarObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable));\n//# sourceMappingURL=ScalarObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ScalarObservable.js","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var EmptyObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable));\n//# sourceMappingURL=EmptyObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/EmptyObservable.js","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable,.._util_isScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isScheduler } from '../util/isScheduler';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable));\n//# sourceMappingURL=ArrayObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ArrayObservable.js","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var OuterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=OuterSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/OuterSubscriber.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isArrayLike.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexport var iterator = /*@__PURE__*/ symbolIteratorPonyfill(root);\n/**\n * @deprecated use iterator instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/iterator.js","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var InnerSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\n//# sourceMappingURL=InnerSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/InnerSubscriber.js","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexport var CombineLatestOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var CombineLatestSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=combineLatest.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/combineLatest.js","/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\nimport { FromEventObservable } from './FromEventObservable';\nexport var fromEvent = FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/fromEvent.js","/** PURE_IMPORTS_START .._Observable,.._util_noop PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var NeverObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    /** @deprecated internal use only */ NeverObservable.prototype._subscribe = function (subscriber) {\n        noop();\n    };\n    return NeverObservable;\n}(Observable));\n//# sourceMappingURL=NeverObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/NeverObservable.js","/** PURE_IMPORTS_START ._NeverObservable PURE_IMPORTS_END */\nimport { NeverObservable } from './NeverObservable';\nexport var never = NeverObservable.create;\n//# sourceMappingURL=never.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/never.js","/** PURE_IMPORTS_START ._ArrayObservable PURE_IMPORTS_END */\nimport { ArrayObservable } from './ArrayObservable';\nexport var of = ArrayObservable.of;\n//# sourceMappingURL=of.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/of.js","/** PURE_IMPORTS_START ._AjaxObservable PURE_IMPORTS_END */\nimport { AjaxObservable } from './AjaxObservable';\nexport var ajax = AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/dom/ajax.js","/** PURE_IMPORTS_START .._Subject,.._Observable,.._Subscriber,.._Subscription,.._operators_refCount PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nexport var ConnectableObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(/** @deprecated internal use only */ source, \n    /** @deprecated internal use only */ subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */ this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ConnectableObservable.js","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayLikeObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable));\n//# sourceMappingURL=ArrayLikeObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js","/** PURE_IMPORTS_START .._util_isArray,.._util_isArrayLike,.._util_isPromise,._PromiseObservable,._IteratorObservable,._ArrayObservable,._ArrayLikeObservable,.._symbol_iterator,.._Observable,.._operators_observeOn,.._symbol_observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from './IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable } from '../Observable';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[Symbol_observable] === 'function') {\n                if (ish instanceof Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray(ish)) {\n                return new ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise(ish)) {\n                return new PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[Symbol_observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable));\n//# sourceMappingURL=FromObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/FromObservable.js","/** PURE_IMPORTS_START ._FromObservable PURE_IMPORTS_END */\nimport { FromObservable } from './FromObservable';\nexport var from = FromObservable.create;\n//# sourceMappingURL=from.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/from.js","// # src / mixin / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// Importing the hy-compontent base libary,\n// which helps with making multiple versions of the component (Vanilla JS, WebComponent, etc...).\nimport { componentMixin, COMPONENT_FEATURE_TESTS, Set } from \"hy-component/src/component\";\nimport { rxjsMixin } from \"hy-component/src/rxjs\";\nimport { arrayOf, bool, oneOf, number, string } from \"hy-component/src/types\";\n\nimport { Subject } from \"rxjs/_esm5/Subject\";\n\nimport { combineLatest } from \"rxjs/_esm5/observable/combineLatest\";\nimport { fromEvent } from \"rxjs/_esm5/observable/fromEvent\";\nimport { never } from \"rxjs/_esm5/observable/never\";\nimport { of } from \"rxjs/_esm5/observable/of\";\n\nimport { ajax } from \"rxjs/_esm5/observable/dom/ajax\";\n\nimport { distinctUntilChanged } from \"rxjs/_esm5/operators/distinctUntilChanged\";\nimport { distinctUntilKeyChanged } from \"rxjs/_esm5/operators/distinctUntilKeyChanged\";\nimport { filter } from \"rxjs/_esm5/operators/filter\";\nimport { map } from \"rxjs/_esm5/operators/map\";\nimport { merge } from \"rxjs/_esm5/operators/merge\";\nimport { share } from \"rxjs/_esm5/operators/share\";\nimport { startWith } from \"rxjs/_esm5/operators/startWith\";\nimport { switchMap } from \"rxjs/_esm5/operators/switchMap\";\nimport { takeUntil } from \"rxjs/_esm5/operators/takeUntil\";\nimport { tap } from \"rxjs/_esm5/operators/tap\";\n\nimport {\n  hasCSSOM,\n  createIntersectionObservable,\n  createResizeObservable,\n  isExternal,\n} from \"../common\";\n\nimport { parseSrcset, srcsetFromSrc } from \"./srcset\";\n\n// A set of [Modernizr] tests that are required for this component to work.\nexport const MIXIN_FEATURE_TESTS = new Set([\n  ...COMPONENT_FEATURE_TESTS,\n  \"eventlistener\",\n  \"queryselector\",\n  \"requestanimationframe\",\n]);\n\nexport const imageMixin = C =>\n  class extends rxjsMixin(componentMixin(C)) {\n    static get componentName() {\n      return \"hy-img\";\n    }\n\n    static get defaults() {\n      return {\n        root: null,\n        rootMargin: \"0px\",\n        src: null,\n        srcset: null,\n        width: null,\n        height: null,\n        alt: null,\n        decoding: null,\n        longdesc: null,\n        ismap: false,\n        usemap: null,\n        /* referrerpolicy: null, */\n      };\n    }\n\n    static get types() {\n      return {\n        root: string,\n        rootMargin: string,\n        src: string,\n        srcset: string,\n        width: number,\n        height: number,\n        alt: string,\n        decoding: oneOf([\"sync\", \"async\", \"auto\"]),\n        longdesc: string,\n        ismap: bool,\n        usemap: string,\n        /*\n        referrerpolicy: oneOf([\n          \"no-referrer\",\n          \"no-referrer-when-downgrade\",\n          \"origin\",\n          \"origin-when-cross-origin\",\n          \"unsafe-url\"\n        ]),\n        */\n      };\n    }\n\n    // ### Setup\n    // Calling the [setup observables function](./setup.md) function.\n    setupComponent(el, props) {\n      super.setupComponent(el, props);\n      this.loadImage$ = new Subject();\n    }\n\n    connectComponent() {\n      this.img = document.createElement(\"img\");\n      this.sizer = document.createElement(\"div\");\n\n      // TODO: update loading when dom changes... use shadow dom after all?\n      this.loading = this.el.querySelector('[slot=\"loading\"]');\n      if (this.loading) this.sizer.appendChild(this.loading);\n\n      // TODO: don't force inline styles\n      if (hasCSSOM) this.img.attributeStyleMap.set(\"display\", \"block\");\n      else this.img.style.display = \"block\";\n\n      this.el.appendChild(this.sizer);\n\n      requestIdleCallback(() => {\n        // TODO: This triggers are layout event for every hy-img,\n        // but we need to get the width of the image somehow.\n        const initialRect = { contentRect: this.el.getBoundingClientRect() };\n\n        const resize$ =\n          \"ResizeObserver\" in window\n            ? createResizeObservable(this.el).pipe(startWith(initialRect))\n            : of(initialRect);\n\n        const sizerStyle$ = combineLatest(resize$, this.subjects.width, this.subjects.height)\n          .pipe(takeUntil(this.subjects.disconnect))\n          .subscribe(this.updateSizerStyle.bind(this));\n\n        const isIntersecting$ = combineLatest(this.subjects.root, this.subjects.rootMargin).pipe(\n          takeUntil(this.subjects.disconnect),\n          switchMap(\n            ([root, rootMargin]) =>\n              \"IntersectionObserver\" in window\n                ? createIntersectionObservable(this.el, { root, rootMargin })\n                : of({ isIntersecting: true })\n          ),\n          map(({ isIntersecting }) => isIntersecting),\n          merge(this.loadImage$),\n          share()\n        );\n\n        isIntersecting$.pipe(filter(x => x), distinctUntilChanged()).subscribe(() => {\n          // TODO: polyfill?\n          const cache = (this.cache = new Map());\n\n          const srcset$ = combineLatest(this.subjects.src, this.subjects.srcset).pipe(\n            filter(([a, b]) => a != null || b != null),\n            distinctUntilChanged(([p1, p2], [q1, q2]) => p1 === q1 && p2 === q2),\n            map(([src, srcset]) => (srcset ? parseSrcset(srcset) : srcsetFromSrc(src)))\n          );\n\n          const url$ = combineLatest(resize$, srcset$).pipe(\n            map(this.selectImgURL.bind(this)),\n            distinctUntilKeyChanged(\"href\")\n          );\n\n          const isIntersecting2$ = isIntersecting$.pipe(startWith(true), distinctUntilChanged());\n\n          const img$ = combineLatest(url$, isIntersecting2$).pipe(\n            takeUntil(this.subjects.disconnect),\n            tap(() => this.loading && this.loading.removeAttribute(\"hidden\")),\n            switchMap(this.makeRequest.bind(this)),\n            switchMap(this.setImgSrcAndLoad.bind(this))\n          );\n\n          // #### Subscriptions\n          // Whenever the object URL changes, we set the new image source.\n          img$.subscribe(\n            () =>\n              requestAnimationFrame(() => {\n                if (this.sizer.parentNode != null) this.el.removeChild(this.sizer);\n                if (this.img.parentNode == null) this.el.appendChild(this.img);\n              }),\n\n            // In case of an error, we just set all the original attributes on the image\n            // and let the browser handle the rest.\n            err => {\n              if (process.env.DEBUG) console.error(err);\n              this.loadImageFallback();\n            }\n          );\n\n          // Keeping other properties up-to-date.\n          this.updateAttr = this.updateAttr.bind(this);\n          this.subjects.alt.subscribe(this.updateAttr(\"alt\"));\n          this.subjects.decoding.subscribe(this.updateAttr(\"decoding\"));\n          this.subjects.longdesc.subscribe(this.updateAttr(\"longdesc\"));\n\n          /* TODO: necessary? */\n          this.subjects.ismap.subscribe(this.updateAttr(\"ismap\"));\n          this.subjects.usemap.subscribe(this.updateAttr(\"usemap\"));\n        });\n\n        // TODO: meh..\n        super.connectComponent();\n\n        // Firing an event to let the outside world know the drawer is ready.\n        this.fireEvent(\"init\");\n      });\n    }\n\n    selectImgURL([intersectionEntry, srcsetObj]) {\n      const {\n        contentRect: { width },\n      } = intersectionEntry;\n\n      return new URL(\n        srcsetObj.select(width || window.screen.width, window.devicePixelRatio || 1),\n        window.location\n      );\n    }\n\n    // TODO: rename?\n    // TODO: doc\n    makeRequest([url, isIntersecting]) {\n      const { href } = url;\n      const { cache } = this;\n\n      if (isIntersecting && !cache.has(href)) {\n        return ajax({\n          method: \"GET\",\n          responseType: \"blob\",\n          url,\n          crossDomain: isExternal(url),\n        }).pipe(\n          map(({ response }) => URL.createObjectURL(response)),\n          tap(objectURL => cache.set(href, objectURL))\n        );\n      } else if (cache.has(href)) {\n        return of(cache.get(href));\n      } else {\n        return never();\n      }\n    }\n\n    setImgSrcAndLoad(url) {\n      const load$ = fromEvent(this.img, \"load\");\n      this.img.src = url;\n      return load$;\n    }\n\n    // Reflect attributes changes on the original on the inner img.\n    updateAttr(name) {\n      return x =>\n        x == null || x === false\n          ? this.img.removeAttribute(name)\n          : this.img.setAttribute(name, x === true ? \"\" : x);\n      /* return x => (x == null ? this.img.removeAttribute(name) : this.img.setAttribute(name, x));\n       */\n    }\n\n    loadImageFallback() {\n      if (this.el.hasAttribute(\"sizes\")) this.img.setAttribute(\"sizes\", this.getAttribute(\"sizes\"));\n      if (this.el.hasAttribute(\"crossorigin\"))\n        this.img.setAttribute(\"crossorigin\", this.getAttribute(\"crossorigin\"));\n      if (this.el.hasAttribute(\"referrerpolicy\"))\n        this.img.setAttribute(\"referrerpolicy\", this.getAttribute(\"referrerpolicy\"));\n\n      /* TODO: pass on width/height? */\n\n      if (this.srcset) this.img.srcset = this.srcset;\n      if (this.src) this.img.src = this.src;\n\n      requestAnimationFrame(() => {\n        if (this.sizer.parentNode != null) this.el.removeChild(this.sizer);\n        if (this.img.parentNode == null) this.el.appendChild(this.img);\n      });\n    }\n\n    updateSizerStyle([intersectionEntry, width, height]) {\n      const {\n        contentRect: { width: contentWidth },\n      } = intersectionEntry;\n\n      if (hasCSSOM) {\n        this.sizer.attributeStyleMap.set(\"position\", \"relative\");\n        if (width != null && height != null) {\n          if (width >= contentWidth) {\n            this.sizer.attributeStyleMap.set(\"width\", CSS.percent(100));\n            this.sizer.attributeStyleMap.set(\"padding-top\", CSS.percent(height / width * 100));\n          } else {\n            this.sizer.attributeStyleMap.set(\"width\", CSS.px(width));\n            this.sizer.attributeStyleMap.set(\"height\", CSS.px(height));\n          }\n        } else {\n          this.sizer.attributeStyleMap.set(\"width\", CSS.percent(100));\n          this.sizer.attributeStyleMap.set(\"height\", CSS.percent(100));\n        }\n      } else {\n        this.sizer.style.position = \"relative\";\n        if (width != null && height != null) {\n          if (width >= contentWidth) {\n            this.sizer.style.width = \"100%\";\n            this.sizer.style.paddingTop = `${height / width * 100}%`;\n          } else {\n            this.sizer.style.width = `${width}px`;\n            this.sizer.style.height = `${height}px`;\n          }\n        } else {\n          this.sizer.style.width = \"100%\";\n          this.sizer.style.height = \"100%\";\n        }\n      }\n    }\n\n    disconnectComponent() {\n      super.disconnectComponent();\n\n      if (this.cache) {\n        this.cache.forEach(objURL => {\n          /* if (process.env.DEBUG) console.log(\"revoke\", objURL); */\n          URL.revokeObjectURL(objURL);\n        });\n      }\n    }\n\n    // ## Methods\n    loadImage() {\n      this.loadImage$.next(true);\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/index.js","// # src / jquery / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// import 'core-js/fn/array/from';\n\nimport {\n  JQueryComponent,\n  defineJQueryComponent,\n  Set,\n} from \"hy-component/src/define-jquery-component\";\n\nimport { imageMixin, MIXIN_FEATURE_TESTS } from \"../mixin\";\n\nexport const JQUERY_FEATURE_TESTS = new Set([...MIXIN_FEATURE_TESTS]);\nJQUERY_FEATURE_TESTS.delete(\"customevent\");\n\nexport { Set };\n\ndefineJQueryComponent(\n  \"hy.img\",\n  class extends imageMixin(JQueryComponent) {\n    setupShadowDOM($el) {\n      return $el;\n    }\n  }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/jquery/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 2\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n// WEBPACK FOOTER //\n// (webpack)/buildin/global.js"],"sourceRoot":""}